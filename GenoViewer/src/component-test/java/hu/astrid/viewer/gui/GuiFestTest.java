/*
 * This file is part of GenoViewer.
 *
 * GenoViewer is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * GenoViewer is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with GenoViewer.  If not, see <http://www.gnu.org/licenses/>.
 */

package hu.astrid.viewer.gui;

import hu.astrid.viewer.Viewer;
import hu.astrid.viewer.gui.content.alignment.ReadLabel;
import hu.astrid.viewer.gui.mutation.MutationsDialog;
import hu.astrid.viewer.properties.ApplicationProperties;
import hu.astrid.viewer.properties.PropertyHandler;
import hu.astrid.viewer.util.FileTypes;
import java.awt.event.KeyEvent;
import java.io.File;
import java.util.Collection;
import java.util.Locale;
import java.util.prefs.Preferences;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import org.fest.assertions.Assertions;
import org.fest.swing.annotation.GUITest;
import org.fest.swing.core.BasicRobot;
import org.fest.swing.core.ComponentFinder;
import org.fest.swing.core.GenericTypeMatcher;
import org.fest.swing.core.Robot;
import org.fest.swing.edt.GuiActionRunner;
import org.fest.swing.edt.GuiQuery;
import org.fest.swing.edt.GuiTask;
import org.fest.swing.finder.WindowFinder;
import org.fest.swing.fixture.DialogFixture;
import org.fest.swing.fixture.FrameFixture;
import org.fest.swing.fixture.JFileChooserFixture;
import org.fest.swing.fixture.JTableFixture;
import org.fest.swing.junit.v4_5.runner.GUITestRunner;
import org.fest.swing.launcher.ApplicationLauncher;
import org.fest.swing.security.ExitException;
import org.fest.swing.security.NoExitSecurityManagerInstaller;
import org.fest.swing.timing.Condition;
import org.fest.swing.timing.Pause;
import org.fest.swing.timing.Timeout;
import org.junit.Test;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Assert;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.runner.RunWith;

/**
 *
 * @author Szuni
 */
@RunWith(GUITestRunner.class)
public class GuiFestTest {

	public static final String TEST_PROPERTY_FILE_RESOURCE = "test.xml";
	public static final int TIMEOUT = 10000;
	private FrameFixture window;
	private static File testDir = new File(System.getProperty("viewer.testfiles.dir"));
	private static NoExitSecurityManagerInstaller noExitSecurityManagerInstaller;

	@BeforeClass
	public static void setUpOnce() {
		File settingsFile = new File(TEST_PROPERTY_FILE_RESOURCE);
		if (settingsFile.exists()) {
			settingsFile.delete();
		}
//        settingsFile.createNewFile();
		settingsFile.deleteOnExit();

		Preferences pref = Preferences.userNodeForPackage(PropertyHandler.class);
		ApplicationProperties p = new ApplicationProperties(pref);
		//Set lastOpenedDirectory to the location of the test files, for each file type
		p.notifyFileOpened(new File(testDir, "test.bam"), FileTypes.BAM);
		p.notifyFileOpened(new File(testDir, "test.sam"), FileTypes.SAM);
		p.notifyFileOpened(new File(testDir, "test.fasta"), FileTypes.FASTA);
		p.notifyFileOpened(new File(testDir, "test.gff"), FileTypes.GFF);
		p.notifiyNewLocale(new Locale("en", "US"));
		p.setLastProfile(PropertyHandler.DEF_PROFILE_NAME);
		p.export(TEST_PROPERTY_FILE_RESOURCE);

		for (File file : testDir.listFiles()) {
			if (file.getName().endsWith(".csv")) {
				file.delete();
			}
		}

		noExitSecurityManagerInstaller = NoExitSecurityManagerInstaller.installNoExitSecurityManager();
	}

	@Before
	public void setUp() throws Exception{
		Robot robot = BasicRobot.robotWithNewAwtHierarchy();
		GuiActionRunner.execute(new GuiTask() {

			@Override
			protected void executeInEDT() throws Throwable {
				ApplicationLauncher.application(Viewer.class).withArgs("--appsettings", "test.xml").start();
			}
		});

		Pause.pause(new Condition("MainWindow to be displayed") {

			@Override
			public boolean test() {
				return Viewer.getMainWindow().isVisible();
			}
		});

		window = WindowFinder.findFrame(new GenericTypeMatcher<MainWindow>(MainWindow.class) {

			@Override
			protected boolean isMatching(MainWindow component) {
				return "GenoViewer".equals(component.getTitle()) && component.isVisible();
			}
		}).using(robot);

		window.menuItemWithPath(Viewer.getLabelResources().getString("menuContigs")).requireDisabled();
		window.menuItemWithPath(Viewer.getLabelResources().getString("consensusMenu")).requireDisabled();
		window.menuItemWithPath(Viewer.getLabelResources().getString("menuFile"), Viewer.getLabelResources().getString("menuItemReadFromPosition")).requireDisabled();
	}

	@Test
	@GUITest
	public void testOpenBamFile() {
		openAlignment(FileTypes.BAM, "test.bam", 4);

		ComponentFinder finder = window.robot.finder();
		Collection<ReadLabel> readLabels = finder.findAll(new GenericTypeMatcher<ReadLabel>(ReadLabel.class) {

			@Override
			protected boolean isMatching(ReadLabel component) {
				return component.getParent() == Viewer.getMainWindow().getDashBoard().alignmentPanel.contentPanel;
			}
		});

		String[] reads = new String[]{"GCAGGCTTCTGGGGTCGCAAGCCCGAGATTCTCGTCCGGTTTAGAGGTCT",
			"TCTCACGGGTGAGCCCAAGATCGATTTGAGCGCATTGAATCGATCCTGGG",
			"CTTTTGAGAATAGTAGGTTGGCATGGGCCATACCCTTTACGTCAC",
			"CGGCG--AGTGG---AAGTATGTCAAGAATGTCGCGTCACGATTCTGCTCGACGG"};

		Assert.assertEquals(4, readLabels.size());
		int i = 0;
		for (ReadLabel label : readLabels) {
			Assertions.assertThat(label.getText()).isEqualTo(reads[i++]);
		}

	}

	@Test
	@GUITest
	public void testGenerateConsensus() {
		openFasta("c1215.fasta");
		openAlignment(FileTypes.SAM, "c1215jo.sam", 20000);

		window.menuItemWithPath(Viewer.getLabelResources().getString("consensusMenu"), Viewer.getLabelResources().getString("consensusGenerateMenuItem")).requireEnabled().click();
		Pause.pause(new Condition("Consensus to be generated") {

			@Override
			public boolean test() {
				return Viewer.getMainWindow().getDashBoard().consensusPanel.contentPanel.getComponentCount() == 2;
			}
		}, Timeout.timeout(TIMEOUT));
	}

	@Test
	@GUITest
	public void testOpenFasta() {
		openFasta("c1215.fasta");

		ComponentFinder finder = window.robot.finder();
		SequenceLabel reference = finder.find(new GenericTypeMatcher<SequenceLabel>(SequenceLabel.class) {

			@Override
			protected boolean isMatching(SequenceLabel component) {
				return component.getParent() == Viewer.getMainWindow().getDashBoard().fastaPanel.contentPanel && !component.isColorMode();
			}
		});

		Assertions.assertThat(reference.getText()).isEqualTo("TATATATAATTTAATAAATACATTCCGACGATACTGCCTCTATGGCTTAGTGGTACAGCATCGCACTTGTAATGCGAAGATCCTTGGTTCGATTCCGAGTGGAGGCATATACATTATATTATATTCTTTTTCATGCGGAAAAAAGATTTCAAATTTTTGGGTATGATATTAATATGACTGTAACGTTAATAGCAAAGTGAGTGTTAATAATGATAAAATAGCAGCAAAATCTCTTTTCCGAGTAAGACGTTTTCCAGTCTAAATTTGGAGTCTGCAGTTGTTTCGCAATTCTTAATGTATGGTTATACTAAATACAAACTTTAAAGCTCTGATTTATGTTTGCAATAAACTAAAATAAAAGCACAAAAACCTTTACCCATTAATTTCAAACAACTTATAAACTACCGGTAAACTTTTTTTCTAACCTTTATAATTTATAAACTAGAATGTTTAATGTCTACGGCCATACCTAGGCGAAAACACCAGTTCCCGTCCGATCACTGCAGTTAAGCGTCTGAGGGCCTCGTTAGTACTATGGTTGGAGACAACATGGGAATCCGGGGTGCTGTAGGCTATTTTTTTATATCCGTCTTTCTTACTACTTGCCTAACAAGTCATGATGTACTCTCAAAATATGTTTGCATGCCTTGTAATATTGGTTATGGATAGCTCCTTCTGGACTTGATCTTTTGTAGCCAAGAACAATGGGTATAGACTCTGACCTTGTGATGTTGTAGCCACAGATTATAATAGGTATTTTCAAGTACAGTAACAAAAATCTTCTAGTTTTTTTTTAGAAAGGATACACCAAGTATAAGCAAATTCAGGAATTGTTGATTAAACTGTCAACTTCGGTAAAACTTTGGGCATAAGTAGTGTGGGAGCAAGTTTAACTAAAATTCTATTCAGATGTCGAATCCAAACCGCTAATTTTGCTCAACTAGCTTTTCATAAAAACCAATTCATAGTTTCATACTAATAAAGACGATTGTTTACTTTAAAACATACGTCGTAAGAACATATATTGCTTTATCGAAAGATAACAAATGTTAAGCTATTATATTATTTAACTATAGCGCAGATTTCGCTTCCTTTACTTAAAAAAGACATGTGACTTGTAGAAGCTTGGAGTGAATACGCAAAGGTACCTACTTAGACATTCGCGTCTCTCTTAGCTGTCAACATCAACAAACTGGCCCCGTATTGAACAGTATCTTACTTGTCGAAGGATTTGACTAAGAAAATTTTATTTCTTTATAGCAATATTCCGTTTTCGCTTAGAAGATTCTAGTCAATTGCCCTATTCTACTTACGCTTTACAGTAGTATCAGAAGACCTGAGTGGGATTTTGCTGCTAGTAGAGGCCATTCAAGTTAACTCCGTTTTGCAACATTTTAAAAGTTTTTGAATTGAATATAAATATCAATTGTTTGATTCCTTTTAGGATTTAATCTTTTCTTTTTATTTTTGTTTCGATTGAATCTTGGATTCCTGTCTATCATGTTTTGGTGGAAAAGTGCTACTAAATTCACATTCTCAAAGCGTGGACCGTGTGTCTTTCGCTATTTGAGTACTCTTGAAGGAACAACTGTGAGGCCTAAAAAAAATAAATTTTTAGTTGGATTGCTTTCTGCCGTTCCAATTGTCACGTTTGCTTTAGGAACTTGGCAGGTAAAGCGACGAGAATGGAAAATGGGTATCATCAATACACTCACGGAAAGGCTTCAACAGCCCGCAATTTTATTACCGAAAACTGTTACGTACGTTAAGTTAACATATACACAAATTGCACGTTTTGCAATTGAACTGTCGTTTTTTACATTAAGCTAACATAATCACTTAGAGAGCAAGATACAAAAAAACTTGAGTGGACTAGGGTTTTGCTTCGTGGTGTGTTTTGTCACGACCAAGAAATGTTGGTCGGTCCAAGAACGAAGGAAGGCCAACCTGGCTATCACGTAGTAACCCCATTTATTTTAGACGATGGGCGTCGAATTTTAGTCAACAGAGGATGGATTGCTCGATCATTTGCTGAACAGTCTTCTCGAGATCCTAGTTCTTTACCTAAAGGTCCAGTGGTCATTGAAGGTCTTTTGAGACAACATACTGATAAGCCAAGATTTATGATGAAGAATGAGCCTGAAAAAAATTCTTTTTACTTCTTAAATGTTCGTGAGTTTGCACAATTGAAAGGAACTCTCCCCATTTTGATAACAGAACTACAACCATCGCTTACACCGTTGCAAGAAGCCGATCATGTTAAGAGAGGCTTGCCTCTTGGTCATCCTCTAAAAGTTGAAATTTTCAACAGTCATACAGAATATATTATCACTTGGTATTCTCTAAGTGTGGTATCAGCTATAATGCTTTACGTCTATTTTAAGAGAGGTTCAGGCACATCTTCTCTGAATTCTGCATACGAAAGAAGCAAGATTCTAAACAACAAACGATTATAAAAAATTTTCATATTTATAAGTTTCTAAATATTATCTACCTAAAATTTTACAAATTTTGGAAGCTTGCTTACTGCGTCCGTCGTTTGAATGTATGAATCGATCATTCCTTCACCAACTTGTTTTGCAAACTTCGGATCGTAAGGAACCTATTATTAGGAAGTTAGTTCTCATGCCTATAATTTTAATGCTCTATAATCATCACGTACCTGAGTTTCAGATAAATTGCTCAGCCAAGAGTTTGACAACAATTCTGATACATATTTTCTGGCGGCCTTCTTTTTATGCTTCGTAATTCCAGAGATACTTCCTAATTTGTTACTGCTGATGTTTTTAAGAAGTTGGTATTGTCTGGTAAATTCTTTTTTCTTGGTAGCTGACACGTGATATAGGAAGCTGTTTAGACAAGTGATAAGGTCATTTATGATCTATAATTCGGTTAGTTTAGAAATTTTTATATCATTTTTTTTAAAAAAAAAAACCAGTTTGGTAAACTTACTTCAGTGTACTTTGTCAATTGACTTAAAGGCGTGGAGTTCTCATAATCGAATGACTCAATTAAATTTTCAATCGTTTCGAACGAGGAATTTTCGTAGTCTCCGTTCTTGACCTTTACCGAAAGTAATCCCAGTTGGATCAATAATTTCATATGAACAATTTCTTCCGAAGTTAATTGCTTCGATAAATCATTGTTTTCGCACAAAACTTCCATTTCCTTAGCACTTAAAACGGCCTTTTCAAAATCGCCGTTTACTATGCTGTCTTGAACGAGAGAATGACCAATGACAGTCAAATGGATCCAAAGCGTGTCCGGTTTAGGCGAATTTCTTAAACTTTCTTCAACTGTTGGCAATTTATCAGATCCATAATCTGCAAAGACCTTTAAATCTCGATTATCTTTCGGAGATGAACATTTGGGAAGATACTGTTTGGGTGGTTTAAAAGCGGTAAGATAATGTATCCTAGCCCGCTCGACCAAAGAAATGCTTTTCCAGGTACTGTGGTCTAAACGGGATCGGAAATTACGCATATCTTCGATTTGAGAGTAAGCACCATCTTCATAAGCCATAGAAATCATCTCTGGTGTTTCAAACTCATTCGAACCATATATTTTGAGACTTGAGTTAATATAGTGAGAAGTAACAGAAGATGGATAATAGGTAGTAGCACGAGTCAAGAGATAATGATCAAGGGTATCGTTTTGAATTTGCTTAATGGACATAGTGTCGTAAACTTTAGCAGCAGCAGGGAAGCCTCCATCAAGAAGAAGATATAAACGAATAAGGGGTAGCTTTAAATGAAAGTTATGTTGACTATAAGTAATGCCTTTTTCTAAAAGACAGATTGCGTCAAAAATTAAAGCTTGTTTTTCGGCAGGTTTTAAATCCTTATTCCCCTCCCACATATATATCAATGAATGAACTGCTAATAACAAAGCTTCATAACCGTGCGTAAAGTCAGTGGGTAATAAGCCTTTACTTAAAGACAAACCCTTTTCAAATGCGACGAAGCATCTACGCACGTAATCGACAACCGATTCTGCAGTAAACGACTCAAAGAGCAAAAAATGGATCTTCAGAAGCAAAACCTCAGCATATAATTTATCGACTTTTTGAGACTACGACGAGTTAATATTGAAAGATGAATAAATACTTACTTCATTGGATTCACCTAGATCAGCCAACTTAAATGCATCTAATAACCGGTGTTGTGCATCAACATTCAGCTTCAATAGATAAGGTCTCAAATCTTCAAAAACAATTGGTTTCATATACAGCTTTTTGATATAGCCAAGTAATGCTGATTCGTGTTCTTCAGGAAAAAACCGTGCGCTGGCTTCAATCCAAAGTAAATGAAGATTTCTTTTTGTGCTGCTGGTTGACAACGCTTTCAATATACAATCCTTTAATGGGACTAATCTATGGAGAAGTTAGTAATAATGCAAAAAAAAAAACTTACTTTGAATCATCATTGGAAGCACTATCCAGCAAAGCTTTGCAAACCTTCCAATCAGTATTCCCAGTTTGGAAAAGAGAAAGCGAAAACGTGAATAAAGAATCCCAACGCGCACAGGAAGCAAGCAATTCAAGCTTCCTCAAAAGAAGGTCGGCGTCAGCATCAACAAAGCGATCAGCATCTTGATGTATTAAAGCATCTAACGCTCTGTCCTTGTCTCCCACTAAAAGCAACACGTCTAAATAAAGATGAAACTCCTCACAAGAATCGATATAACCTGTTGGTTTTTCGAAAATGAGTTTAGCAGTTTTTTCAGCTAGTGCTTTCAGCAAACGTTGTTCAACCTCATTTTCCGACTTTTTGGACAAAAGATACAAAGATGAGATAACCCATAAGGTATGTTTCCTAGAAGGAAAGTTCTTTTGCAATTCTACAGCAGCCTGAGGAGTTAGTAAAAAAAAAACAAATTAAGATCTTACCTTTCTTTGGTGAGACAATGATTTGATGCGAATAGATGCTTTGAAGTAAGCTAATAAGTTTTTTTCCTGCTTTCCATAAGTTTGCAAGAACTTTTCCCAAAATACAAACGATTCTTCTCCTTCAAATAGTTAATAACTTAAAAGTAAGAGGGTAAAAACAAGTCCATTGAGAAATAAAACGTTGCACTTGAATCATCAAGCTACGAAAAGAACAAAGATCGTTTTTCTTAAGCAAAGTTTAACCGATCAAATAACTAAAGCCTTTATCTCAAGGAAATAGTAGAATATTCAAAATAAAAAATACGACCAAAGTGCTATCAACATTTATGTTCATCTGTTCAATAGAACCTAATTATACTTACCCTTCTTTTGATCATCATAAACAGCTTGTATAATGTCTAAAAGTTCCAAGCTGTTGATGGGAGTCGATTTTAACGGTTCTAAAAGTGCTAGAGCCTCGGGACCACGTCCTGCCTGAGCCAAGGATAACGCTGAATAAACCTAAAAAGGATGTTAACAGCTAAAAACATAACTCGATTACTTACAATTGTTGATTCTTTACTCCCAGAACGACGCATTGTAGTAGGCAATGAAATTAAAGCCCAAACAGTAGTCAGAAGTTGGTAGGTGTTGCAGTCAAATTATTATTCTACAGAGGAGAATATTATAGCCAGCGTGGTAGAATCTGGATATATATCTACTGCAAAAGTGTAATTGCATTGGTTTAAAGGGTATACTATGGTTAAGTAATATATTCACAGCTGTACAATTTACAGTCATAACTAAAACTTCCTTAAGCCGTAAAGAAATACCTGGTGTTGTAAAATTTGTTGTATATCCACGGCATGGTCATATAATGTGATTTTGTGCTCAAATAAATATAAAATATGCATAATTTTTGTACATTTAATTTGAGAAACCCATCTTTTGTTGAGAGGCTGTCAATGAATAGCAGTTTCATTGAAAAGCAGCGGGATGACCAGAAAAGTATTTTACAATGGCAAGGGAGTAGAAAGCTAGCGTAATATTCAGAAAGCTAGGTAATTGAGCAATCCTTTAATTCATTGCTAAGCATGCTAGGTAAACGCAGTAAACCTTTCAGTTTTCATTTAGGTATAAGGCTGTTTAATGAGTATCTCCACTAAATTTAAAGATCAAAACTCAGTATCAATTCTTAAAAGTTTTATTTTATTTAATAATCATATACTTCTCATAATCTTTCAATTTTTTCCCCATTTTGATGATATTTTTATTAATCCTACAGTAAGCTCTATGATATCGTTATTCTTCAAATAGGCTGGTCAGCACGTGGACGGTGTTACTTATCGTTAAATAAATCGTACTAAGGAGGTGCGATGTAAATGATATGCTTGTCAAGTATTAACTGCTCTCCACCAACCGCCGGTTTAACTGATTATTGTTGAAAAGCGCAGACGAAGTTTAGAGAATTACTAGCGTATTTTAAATTTAATCAACGGACTATTTTTTATTCCTTTGAGATCCGACTTTATCGCTTTGCTTCTAATTTTCCAAAATTCAGTCTATCTACGCGATCCAGCCCTGTTTGCGTAAATTTCATATTATTTTTCTTTAAACGTTTGG");
	}

	@Test
	@GUITest
	public void testOpenMultiFasta() {
		openFasta("1.fasta");

		ComponentFinder finder = window.robot.finder();
		SequenceLabel reference = finder.find(new GenericTypeMatcher<SequenceLabel>(SequenceLabel.class) {

			@Override
			protected boolean isMatching(SequenceLabel component) {
				return component.getParent() == Viewer.getMainWindow().getDashBoard().fastaPanel.contentPanel && !component.isColorMode();
			}
		});

		Assertions.assertThat(reference.getText()).isEqualTo("CTCTACGTTGTCGGAGTCGCTATCGGCAAACTGATGACCCTGCGCCGCCAGACCATCAAGTGACACCCATGAAACCACATTTGTGTAGTCATTTGACCCGCTTGGCAAGCCACTCAAACCGGTTGCGGATGAGCCAAGGACTCACTAGCGTTCAGGGGAGTGGTACATCGTGGGTAGCTTGTCACACCGACTGTGGAAAACTGTGTGGACAACTCTCGACAACTTCTAGAGAACAGGTGGTGGAATGTCCGACACACCGTTCGGCGACGCCGACCACCCTCGTCCCGCGCCGATCCATCCGGATGCTGTATTGCCCCCGCCGATGAGTTCACAGTCGGCTGATAATGATCCCACTGAGGCCCTCAATGAAGCTTGGACCAACATCCTTACGAAGGTTTCGAAACCTAATCGCGCGTGGTTATCCAACACTACCCCGGTGACGATGCACTCTTCTACGGCGATGGTTGCCGTTCCCAACGAATTTGCCCGTGACCGTCTTGAATCAAAGATGCGTTACGAACTAGAAGAACTCCTCTCTGACCATTTTCACAAAGCCATCCACCTAGCCATCACCATCGATCCCGATCTGGAATTGGCTCTTGGTGCTCCTGACCATGAGGACGAGGAAGAAGAGGTTCCACCTGCCCAGTTCGTCCCCAAGGTCACCGTCGGAGTCACTGAACCCTCTGCTCGGCCCACCACCACTATCGACGATGACGAAGGCAACCGACTCAACCCGAAGTACACCTTCGATTCCTTCGTCATCGGTGCATCTAATCGGTTTGCTCACGCCGCCGCAGTCGCGGTTGCCGAGGCCCCTGGAAAGTCGTACAACCCGCTGCTTATCTATGGCGGCTCTGGGCTAGGGAAAACCCACCTGCTGCATGCCATCGGGCGTTACGTCATGTCGTATTACGACAACGTCAAAGTGAAGTACGTCTCTACCGAGGAACTCACCAACGACTTCATCAACGCCATCGGCACCAACCGCACCACGGAGTTCCGTCGCTCTTACCGCGATGTTGACGTCCTGCTAGTTGACGACATCCAGTTTTTGCAGTCGAAGATCCAAACCCAGGAAGAGTTCTTCCACACCTTCAATACTCTTCACAACGCCCAGAAGCAGATCGTCATGACCTCTGACCGGCCGCCTAAGCTGTTGGAGGCCCTTGAGCCGCGTCTGCGCAGCCGGTTTGAATGGGGTCTGCTTACTGACATCCAGCCTCCAGATCTAGAGACTCGCATCGCCATCCTGCGGCGCAAGGTTGCGGCCGAGAAGATCACCGTCGAGCCGGACGTGCTGGAGTTCATCGCTAGCCGTATCCAAACCAATATCCGTGAGCTCGAGGGAGCCCTCATCCGGGTGACGGCTTTTGCCAGCCTCAATCAGCAACCGGTGGATATCTCTCTGGCTGAAGTCGTCCTCAAGGACCTCATCCCGGAAGGTCGCGAGACCCCGGTGACACCAGAGCGCATTATCGCGGAGACCGCCGACTACTTCGACATCTCTGCGGACGATCTTTTAGGCACCTCCCGCGCTCAGACCCTTGTCACAGCCCGACAAATTGCGATGTACCTGTGCCGCGAGCTCACTGACCTCTCGTTGCCCAAGATCGGCGCCGAGTTTGGCGGCAAGGACCACACCACCGTCATGCATGCTGACCGCAAGATTCGCGCCCTCATGGGGGAGCAGCGTCAGATCTTCAATCAGGTCTCTGAGATCACCAACCGCATCAAGCAGTACTGAGCTGAACCGCAGCCTACGGTGACAGCTATACCTGTGTCGTTGAGCTAGGCACAAGCCCGCCCCGTGACACCTATCCCCACACCCATATGTGGAAAACCAGTGGACAGCCAGGGGATAACGGTGGGACAACTTCCTATATCCACAGCCACCCCACCAGCACGCACATCTAGTCCACGTCGTCGTCCACTGCCACAAAACGTTGCTGACAAGGGAGTTTGGCAGTTATCCACAAGTTCCACAGGGGTTACGAGTACGAAGAAAAGACATACATCTCCATCTCTCACAAGTCTGTGGGTGTGGATTTGGGGACAAGGCCTCGCTGCCGCACACCGCTCTAACACGGGAAGAAGATCCACTACCAAGAGAACTCTTGACGTCGACATCACCATGGGCGTGCCAACGGTCGGCAAGCATGGATATGATCAGCATGCAGGCACCATGGAGTGCGAGACGCCAAATCAAGGGGACGCAGTGGAAATCCGTCTGGAACGCGATGTCATGGCCGAAGCTGTCGCCTGGGCTGCTCGCAGTCTGCCGAACCGGCCGACAGTGCCGATTTTGGCTGGACTGCTCGTGCGAGCTGAGGGCGACTCGGTGGTGATGTCGGCCTCCGACAATGAGACCAGCGCACAAATTACCCTTTCCGCTCAGGTTGACGAGCCGGGGGAATCTCTTGTCTCTGGCAAGCTGCTTGCTGATATTGCTCGTAGCTTGCCTAACAAGCCGGTTCAGATCACGACGGACCCCGCCAAGATGGATCTGGTGTGCGGATCTGCTCGCTTTACCCTTCAGGCCCTACCTGTTGATGAGTATCCTGATCTGCCGCAAATGCCTGCAGCAACGGGCACTGTTGACGCCAGTGTTTTCTCCAGGGCTGTCGCTCAGGTCGTCGTGGCTGCTGGTCGTGATGAGCTATTGCCGGTCTTTACGGGTGTGCGCGTCGAAATCAACGGGGAGACCCTCTCGCTGCTGGCTACAGACCGTTACCGGATGGCTCTCAAGGAAATCACCTGGAATCCCAGCGCCACCGACGCTGAGGCTACTGCTTTGGTGCCGGCTAAGGTCATCAATGAAACCGCGCGCTCGATGACCTCTGGCGAGCACGTCACCATGAACCTTTCTTCGGGCGACAGTGGTGAAGGTCTTGTCGGTTTTGAAGGTGACGGGGCCAACGGTGTGCGTCGCATGACCACTCGCTTGCTAAGTGGGGAATTCCCTAAAGTGCGTCACCTCATGGACATCAAGGCCACTCGTTCGGTGCGGGCTCGTACCGATGAGCTCATCAACTCGGTGCGTCGCGTTTCCCTCGTTGCTGAGCGCAACACTCCGCTGCGGATGGTCATTAATGACGACTCGGTCGCCTTGTCAGCGGCCACGGGCGACCAGGCTCAAGCTTCTGAGGCCATTGAGGCTGTTGTTACAAACCACGTTGACGGGGAGCCCACTATTACCGCGGCAGGGTTCAACCCGCATTATCTGTCTGACGCCCTTGGTGCCCTGGATACCCCCTACGTCCACTTCTCTTTCACCGCTCCTGGCAAGCCTTGCCTGGTGACTGGTCTCAATGACTTCGACGGCAAGCCGGAGACGGATTACCGTCACGTCATCATGCTGATGAGATTGCCCTCCTGAGGTAGCTTCGCGTCACGAAGAGTCTTGCTCGATAGCCCCATAAAGCATACTTGTATTGGGCTATAGCACTGCCCTTGATAGGCAAGTGCCATGGGGTGCCAAATGGCCTTGCTAGGGGGATACAGCGACTTAACAA");

		window.menuItemWithPath(Viewer.getLabelResources().getString("menuContigs"), "fdsfljs").requireEnabled().click();
		Assertions.assertThat(reference.getText()).isEqualTo("AACTCTCGACAACTTCTAGAGAACAGGTGGTGGAATGTCCGACACACCGTTCGGCGACGCCGACCACCCTCGTCCCGCGCCGATCCATCCGGATGCTGTATTGCCCCCGCCGATGAGTTCACAGTCGGCTGATAATGATCCCACTGAGGCCCTCAATGAAGCTTGGACCAACATCCTTACGAAGGTTTCGAAACCTAATCGCGCGTGGTTATCCAACACTACCCCGGTGACGATGCACTCTTCTACGGCGATGGTTGCCGTTCCCAACGAATTTGCCCGTGACCGTCTTGAATCAAAGATGCGTTACGAACTAGAAGAACTCCTCTCTGACCATTTTCACAAAGCCATCCACCTAGCCATCACCATCGATCCCGATCTGGAATTGGCTCTTGGTGCTCCTGACCATGAGGACGAGGAAGAAGAGGTTCCACCTGCCCAGTTCGTCCCCAAGGTCACCGTCGGAGTCACTGAACCCTCTGCTCGGCCCACCACCACTATCGACGATGACGAAGGCAACCGACTCAACCCGAAGTACACCTTCGATTCCTTCGTCATCGGTGCATCTAATCGGTTTGCTCACGCCGCCGCAGTCGCGGTTGCCGAGGCCCCTGGAAAGTCGTACAACCCGCTGCTTATCTATGGCGGCTCTGGGCTAGGGAAAACCCACCTGCTGCATGCCATCGGGCGTTACGTCATGTCGTATTACGACAACGTCAAAGTGAAGTACGTCTCTACCGAGGAACTCACCAACGACTTCATCAACGCCATCGGCACCAACCGCACCACGGAGTTCCGTCGCTCTTACCGCGATGTTGACGTCCTGCTAGTTGACGACATCCAGTTTTTGCAGTCGAAGATCCAAACCCAGGAAGAGTTCTTCCACACCTTCAATACTCTTCACAACGCCCAGAAGCAGATCGTCATGACCTCTGACCGGCCGCCTAAGCTGTTGGAGGCCCTTGAGCCGCGTCTGCGCAGCCGGTTTGAATGGGGTCTGCTTACTGACATCCAGCCTCCAGATCTAGAGACTCGCATCGCCATCCTGCGGCGCAAGGTTGCGGCCGAGAAGATCACCGTCGAGCCGGACGTGCTGGAGTTCATCGCTAGCCGTATCCAAACCAATATCCGTGAGCTCGAGGGAGCCCTCATCCGGGTGACGGCTTTTGCCAGCCTCAATCAGCAACCGGTGGATATCTCTCTGGCTGAAGTCGTCCTCAAGGACCTCATCCCGGAAGGTCGCGAGACCCCGGTGACACCAGAGCGCATTATCGCGGAGACCGCCGACTACTTCGACATCTCTGCGGACGATCTTTTAGGCACCTCCCGCGCTCAGACCCTTGTCACAGCCCGACAAATTGCGATGTACCTGTGCCGCGAGCTCACTGACCTCTCGTTGCCCAAGATCGGCGCCGAGTTTGGCGGCAAGGACCACACCACCGTCATGCATGCTGACCGCAAGATTCGCGCCCTCATGGGGGAGCAGCGTCAGATCTTCAATCAGGTCTCTGAGATCACCAACCGCATCAAGCAGTACTGAGCTGAACCGCAGCCTACGGTGACAGCTATACCTGTGTCGTTGAGCTAGGCACAAGCCCGCCCCGTGACACCTATCCCCACACCCATATGTGGAAAACCAGTGGACAGCCAGGGGATAACGGTGGGACAACTTCCTATATCCACAGCCACCCCACCAGCACGCACATCTAGTCCACGTCGTCGTCCACTGCCACAAAACGTTGCTGACAAGGGAGTTTGGCAGTTATCCACAAGTTCCACAGGGGTTACGAGTACGAAGAAAAGACATACATCTCCATCTCTCACAAGTCTGTGGGTGTGGATTTGGGGACAAGGCCTCGCTGCCGCACACCGCTCTAACACGGGAAGAAGATCCACTACCAAGAGAACTCTTGACGTCGACATCACCATGGGCGTGCCAACGGTCGGCAAGCATGGATATGATCAGCATGCAGGCACCATGGAGTGCGAGACGCCAAATCAAGGGGACGCAGTGGAAATCCGTCTGGAACGCGATGTCATGGCCGAAGCTGTCGCCTGGGCTGCTCGCAGTCTGCCGAACCGGCCGACAGTGCCGATTTTGGCTGGACTGCTCGTGCGAGCTGAGGGCGACTCGGTGGTGATGTCGGCCTCCGACAATGAGACCAGCGCACAAATTACCCTTTCCGCTCAGGTTGACGAGCCGGGGGAATCTCTTGTCTCTGGCAAGCTGCTTGCTGATATTGCTCGTAGCTTGCCTAACAAGCCGGTTCAGATCACGACGGACCCCGCCAAGATGGATCTGGTGTGCGGATCTGCTCGCTTTACCCTTCAGGCCCTACCTGTTGATGAGTATCCTGATCTGCCGCAAATGCCTGCAGCAACGGGCACTGTTGACGCCAGTGTTTTCTCCAGGGCTGTCGCTCAGGTCGTCGTGGCTGCTGGTCGTGATGAGCTATTGCCGGTCTTTACGGGTGTGCGCGTCGAAATCAACGGGGAGACCCTCTCGCTGCTGGCTACAGACCGTTACCGGATGGCTCTCAAGGAAATCACCTGGAATCCCAGCGCCACCGACGCTGAGGCTACTGCTTTGGTGCCGGCTAAGGTCATCAATGAAACCGCGCGCTCGATGACCTCTGGCGAGCACGTCACCATGAACCTTTCTTCGGGCGACAGTGGTGAAGGTCTTGTCGGTTTTGAAGGTGACGGGGCCAACGGTGTGCGTCGCATGACCACTCGCTTGCTAAGTGGGGAATTCCCTAAAGTGCGTCACCTCATGGACATCAAGGCCACTCGTTCGGTGCGGGCTCGTACCGATGAGCTCATCAACTCGGTGCGTCGCGTTTCCCTCGTTGCTGAGCGCAACACTCCGCTGCGGATGGTCATTAATGACGACTCGGTCGCCTTGTCAGCGGCCACGGGCGACCAGGCTCAAGCTTCTGAGGCCATTGAGGCTGTTGTTACAAACCACGTTGACGGGGAGCCCACTATTACCGCGGCAGGGTTCAACCCGCATTATCTGTCTGACGCCCTTGGTGCCCTGGATACCCCCTACGTCCACTTCTCTTTCACCGCTCCTGGCAAGCCTTGCCTGGTGACTGGTCTCAATGACTTCGACGGCAAGCCGGAGACGGATTACCGTCACGTCATCATGCTGATGAGATTGCCCTCCTGAGGTAGCTTCGCGTCACGAAGAGTCTTGCTCGATAGCCCCATAAAGCATACTACGATACAGGGAT");

		window.menuItemWithPath(Viewer.getLabelResources().getString("menuContigs"), "6556526").requireEnabled().click();
		Assertions.assertThat(reference.getText()).isEqualTo("AACTCTCGACAACTTCTAGAGAACAGGTGGTGGAATGTCCGACACACCGTTCGGCGACGCCGACCACCCTCGTCCCGCGCCGATCCATCCGGATGCTGTATTGCCCCCGCCGATGAGTTCACAGTCGGCTGATAATGATCCCACTGAGGCCCTCAATGAAGCTTGGACCAACATCCTTACGAAGGTTTCGAAACCTAATCGCGCGTGGTTATCCAACACTACCCCGGTGACGATGCACTCTTCTACGGCGATGGTTGCCGTTCCCAACGAATTTGCCCGTGACCGTCTTGAATCAAAGATGCGTTACGAACTAGAAGAACTCCTCTCTGACCATTTTCACAAAGCCATCCACCTAGCCATCACCATCGATCCCGATCTGGAATTGGCTCTTGGTGCTCCTGACCATGAGGACGAGGAAGAAGAGGTTCCACCTGCCCAGTTCGTCCCCAAGGTCACCGTCGGAGTCACTGAACCCTCTGCTCGGCCCACCACCACTATCGACGATGACGAAGGCAACCGACTCAACCCGAAGTACACCTTCGATTCCTTCGTCATCGGTGCATCTAATCGGTTTGCTCACGCCGCCGCAGTCGCGGTTGCCGAGGCCCCTGGAAAGTCGTACAACCCGCTGCTTATCTATGGCGGCTCTGGGCTAGGGAAAACCCACCTGCTGCATGCCATCGGGCGTTACGTCATGTCGTATTACGACAACGTCAAAGTGAAGTACGTCTCTACCGAGGAACTCACCAACGACTTCATCAACGCCATCGGCACCAACCGCACCACGGAGTTCCGTCGCTCTTACCGCGATGTTGACGTCCTGCTAGTTGACGACATCCAGTTTTTGCAGTCGAAGATCCAAACCCAGGAAGAGTTCTTCCACACCTTCAATACTCTTCACAACGCCCAGAAGCAGATCGTCATGACCTCTGACCGGCCGCCTAAGCTGTTGGAGGCCCTTGAGCCGCGTCTGCGCAGCCGGTTTGAATGGGGTCTGCTTACTGACATCCAGCCTCCAGATCTAGAGACTCGCATCGCCATCCTGCGGCGCAAGGTTGCGGCCGAGAAGATCACCGTCGAGCCGGACGTGCTGGAGTTCATCGCTAGCCGTATCCAAACCAATATCCGTGAGCTCGAGGGAGCCCTCATCCGGGTGACGGCTTTTGCCAGCCTCAATCAGCAACCGGTGGATATCTCTCTGGCTGAAGTCGTCCTCAAGGACCTCATCCCGGAAGGTCGCGAGACCCCGGTGACACCAGAGCGCATTATCGCGGAGACCGCCGACTACTTCGACATCTCTGCGGACGATCTTTTAGGCACCTCCCGCGCTCAGACCCTTGTCACAGCCCGACAAATTGCGATGTACCTGTGCCGCGAGCTCACTGACCTCTCGTTGCCCAAGATCGGCGCCGAGTTTGGCGGCAAGGACCACACCACCGTCATGCATGCTGACCGCAAGATTCGCGCCCTCATGGGGGAGCAGCGTCAGATCTTCAATCAGGTCTCTGAGATCACCAACCGCATCAAGCAGTACTGAGCTGAACCGCAGCCTACGGTGACAGCTATACCTGTGTCGTTGAGCTAGGCACAAGCCCGCCCCGTGACACCTATCCCCACACCCATATGTGGAAAACCAGTGGACAGCCAGGGGATAACGGTGGGACAACTTCCTATATCCACAGCCACCCCACCAGCACGCACATCTAGTCCACGTCGTCGTCCACTGCCACAAAACGTTGCTGACAAGGGAGTTTGGCAGTTATCCACAAGTTCCACAGGGGTTACGAGTACGAAGAAAAGACATACATCTCCATCTCTCACAAGTCTGTGGGTGTGGATTTGGGGACAAGGCCTCGCTGCCGCACACCGCTCTAACACGGGAAGAAGATCCACTACCAAGAGAACTCTTGACGTCGACATCACCATGGGCGTGCCAACGGTCGGCAAGCATGGATATGATCAGCATGCAGGCACCATGGAGTGCGAGACGCCAAATCAAGGGGACGCAGTGGAAATCCGTCTGGAACGCGATGTCATGGCCGAAGCTGTCGCCTGGGCTGCTCGCAGTCTGCCGAACCGGCCGACAGTGCCGATTTTGGCTGGACTGCTCGTGCGAGCTGAGGGCGACTCGGTGGTGATGTCGGCCTCCGACAATGAGACCAGCGCACAAATTACCCTTTCCGCTCAGGTTGACGAGCCGGGGGAATCTCTTGTCTCTGGCAAGCTGCTTGCTGATATTGCTCGTAGCTTGCCTAACAAGCCGGTTCAGATCACGACGGACCCCGCCAAGATGGATCTGGTGTGCGGATCTGCTCGCTTTACCCTTCAGGCCCTACCTGTTGATGAGTATCCTGATCTGCCGCAAATGCCTGCAGCAACGGGCACTGTTGACGCCAGTGTTTTCTCCAGGGCTGTCGCTCAGGTCGTCGTGGCTGCTGGTCGTGATGAGCTATTGCCGGTCTTTACGGGTGTGCGCGTCGAAATCAACGGGGAGACCCTCTCGCTGCTGGCTACAGACCGTTACCGGATGGCTCTCAAGGAAATCACCTGGAATCCCAGCGCCACCGACGCTGAGGCTACTGCTTTGGTGCCGGCTAAGGTCATCAATGAAACCGCGCGCTCGATGACCTCTGGCGAGCACGTCACCATGAACCTTTCTTCGGGCGACAGTGGTGAAGGTCTTGTCGGTTTTGAAGGTGACGGGGCCAACGGTGTGCGTCGCATGACCACTCGCTTGCTAAGTGGGGAATTCCCTAAAGTGCGTCACCTCATGGACATCAAGGCCACTCGTTCGGTGCGGGCTCGTACCGATGAGCTCATCAACTCGGTGCGTCGCGTTTCCCTCGTTGCTGAGCGCAACACTCCGCTGCGGATGGTCATTAATGACGACTCGGTCGCCTTGTCAGCGGCCACGGGCGACCAGGCTCAAGCTTCTGAGGCCATTGAGGCTGTTGTTACAAACCACGTTGACGGGGAGCCCACTATTACCGCGGCAGGGTTCAACCCGCATTATCTGTCTGACGCCCTTGGTGCCCTGGATACCCCCTACGTCCACTTCTCTTTCACCGCTCCTGGCAAGCCTTGCCTGGTGACTGGTCTCAATGACTTCGACGGCAAGCCGGAGACGGATTACCGTCACGTCATCATGCTGATGAGATTGCCCTCCTGAGGTAGCTTCGCGTCACGAAGAGTCTTGCTCGATAGCCCCATAAAGCATACTACGATACAGGGAT");

		window.menuItemWithPath(Viewer.getLabelResources().getString("menuContigs"), "id4").requireEnabled().click();
		Assertions.assertThat(reference.getText()).isEqualTo("ACGT");

	}

	@Test
	@GUITest
	public void testOpenGff() {
		openGff("teszt.gff", 6);
	}

	@Test
	@GUITest
	public void testOpenSam() {
		openAlignment(FileTypes.SAM, "test.sam", 4);

		ComponentFinder finder = window.robot.finder();
		Collection<ReadLabel> readLabels = finder.findAll(new GenericTypeMatcher<ReadLabel>(ReadLabel.class) {

			@Override
			protected boolean isMatching(ReadLabel component) {
				return component.getParent() == Viewer.getMainWindow().getDashBoard().alignmentPanel.contentPanel;
			}
		});

		String[] reads = new String[]{"GCAGGCTTCTGGGGTCGCAAGCCCGAGATTCTCGTCCGGTTTAGAGGTCT",
			"TCTCACGGGTGAGCCCAAGATCGATTTGAGCGCATTGAATCGATCCTGGG",
			"CTTTTGAGAATAGTAGGTTGGCATGGGCCATACCCTTTACGTCAC",
			"CGGCG--AGTGG---AAGTATGTCAAGAATGTCGCGTCACGATTCTGCTCGACGG"};

		String[] dialogNames = new String[]{"read_1", "read_2", "read_3", "read_4"};

		Assert.assertEquals(4, readLabels.size());
		int i = 0;
		for (ReadLabel label : readLabels) {
			Assertions.assertThat(label.getText()).isEqualTo(reads[i]);
			window.robot.click(label);
			DialogFixture fix = new DialogFixture(window.robot, "readInfoDialog").requireVisible();
			Assertions.assertThat(fix.target.getTitle()).isEqualTo(dialogNames[i]);
			fix.close();
			++i;
		}
	}

	@Test
	@GUITest
	public void testOpenWrongSam() {
		window.menuItemWithPath(Viewer.getLabelResources().getString("menuFile"), Viewer.getLabelResources().getString("menuItemOpenSAM")).click();
		JFileChooserFixture fileChooser = new JFileChooserFixture(window.robot);
		fileChooser.selectFile(new File(System.getProperty("viewer.testfiles.dir") + "/c1215.fasta"));
		fileChooser.approve();
		final DialogFixture fix = window.dialog(Timeout.timeout(TIMEOUT)).requireVisible();
		Assertions.assertThat(fix.target.getTitle()).isEqualTo(Viewer.getLabelResources().getString("dialogTitleWarning"));
		fix.close();
	}

	@Test
	@GUITest
	public void testMutationsTable() {
		openFasta("c1215.fasta");
		openAlignment(FileTypes.SAM, "c1215jo.sam", 20000);

		window.menuItemWithPath(Viewer.getLabelResources().getString("consensusMenu"), Viewer.getLabelResources().getString("menuItemMutationTable")).requireEnabled().click();
		final MutationsDialog mutationDialog = window.robot.finder().find(new GenericTypeMatcher<MutationsDialog>(MutationsDialog.class) {

			@Override
			protected boolean isMatching(MutationsDialog component) {
				return component != null;
			}
		});
		Pause.pause(new Condition("Mutation table to be generated") {

			@Override
			public boolean test() {
				return mutationDialog.isVisible();
			}
		}, Timeout.timeout(TIMEOUT));

		DialogFixture dialogFixture = new DialogFixture(window.robot, "mutationsDialog").requireVisible();

		final JTableFixture tableFixture = dialogFixture.table("mutationsTable").requireRowCount(100);
		dialogFixture.textBox("mutationPages").requireText("1/60").setText("60").pressKey(KeyEvent.VK_ENTER);
		Pause.pause(new Condition("Mutation table page to be switched") {

			@Override
			public boolean test() {
				return tableFixture.rowCount() == 70;
			}
		}, Timeout.timeout(TIMEOUT));

		dialogFixture.close();
	}

	@After
	public void tearDown() {		
		window.cleanUp();

		for (File file : testDir.listFiles()) {
			if (file.getName().endsWith(".csv")) {
				file.delete();
			}
		}

		GuiActionRunner.execute(new GuiTask() {

			@Override
			protected void executeInEDT() throws Throwable {
				try {
					Viewer.getMainWindow().exit();
				} catch (ExitException ignore) {
				}
			}
		});
	}

	@AfterClass
	public static void tearDownOnce() {
		noExitSecurityManagerInstaller.uninstall();
	}

	/**
	 * Open an alignment file and wait for displaying alignments
	 * @param fileType {@link FileTypes#BAM} or {@link FileTypes#SAM}
	 * @param fileName
	 * @param recordCount records in alignment file
	 */
	private void openAlignment(FileTypes fileType, String fileName, final int recordCount) {
		window.menuItemWithPath(Viewer.getLabelResources().getString("menuFile"), Viewer.getLabelResources().getString("menuItemOpen" + fileType.name())).click();
		JFileChooserFixture fileChooser = new JFileChooserFixture(window.robot);
		fileChooser.selectFile(new File(System.getProperty("viewer.testfiles.dir") + "/" + fileName));
		fileChooser.approve();
		Pause.pause(new Condition("All read labels to be displayed") {

			@Override
			public boolean test() {
				return GuiActionRunner.execute(new GuiQuery<Integer>() {

					@Override
					protected Integer executeInEDT() throws Throwable {
						return Viewer.getMainWindow().getDashBoard().alignmentPanel.contentPanel.getComponentCount();
					}
				}) == recordCount + 1;
			}
		}, Timeout.timeout(TIMEOUT));

		window.menuItemWithPath(Viewer.getLabelResources().getString("menuContigs")).requireEnabled();
		window.menuItemWithPath(Viewer.getLabelResources().getString("consensusMenu")).requireEnabled();
		window.menuItemWithPath(Viewer.getLabelResources().getString("menuFile"), Viewer.getLabelResources().getString("menuItemReadFromPosition")).requireEnabled();
	}

	/**
	 * Open a fasta file and wait for displaying reference
	 * @param fileName
	 */
	private void openFasta(String fileName) {
		window.menuItemWithPath(Viewer.getLabelResources().getString("menuFile"), Viewer.getLabelResources().getString("menuItemOpenFasta")).click();
		JFileChooserFixture fileChooser = new JFileChooserFixture(window.robot);
		fileChooser.selectFile(new File(System.getProperty("viewer.testfiles.dir") + "/" + fileName));
		fileChooser.approve();
		Pause.pause(new Condition("Fasta sequence to be displayed") {

			@Override
			public boolean test() {
				return GuiActionRunner.execute(new GuiQuery<Integer>() {

					@Override
					protected Integer executeInEDT() throws Throwable {
						return Viewer.getMainWindow().getDashBoard().fastaPanel.contentPanel.getComponentCount();
					}
				}) == 2;
			}
		}, Timeout.timeout(TIMEOUT));

		window.menuItemWithPath(Viewer.getLabelResources().getString("menuContigs")).requireEnabled();
		window.menuItemWithPath(Viewer.getLabelResources().getString("consensusMenu")).requireDisabled();
		window.menuItemWithPath(Viewer.getLabelResources().getString("menuFile"), Viewer.getLabelResources().getString("menuItemReadFromPosition")).requireEnabled();
	}

	/**
	 * Open an annotation file and wait for displaying features
	 * @param fileName
	 * @param recordCount
	 */
	private void openGff(String fileName, final int recordCount) {
		window.menuItemWithPath(Viewer.getLabelResources().getString("menuFile"), Viewer.getLabelResources().getString("menuItemOpenGFF")).click();
		JFileChooserFixture fileChooser = new JFileChooserFixture(window.robot);
		fileChooser.selectFile(new File(System.getProperty("viewer.testfiles.dir") + "/" + fileName));
		fileChooser.approve();
		window.dialog().button().click();
		Pause.pause(new Condition("Annotations to be displayed") {

			@Override
			public boolean test() {
				return GuiActionRunner.execute(new GuiQuery<Integer>() {

					@Override
					protected Integer executeInEDT() throws Throwable {
						return Viewer.getMainWindow().getDashBoard().gffPanel.contentPanel.getComponentCount();
					}
				}) == recordCount;
			}
		}, Timeout.timeout(TIMEOUT));

		window.menuItemWithPath(Viewer.getLabelResources().getString("menuContigs")).requireDisabled();
		window.menuItemWithPath(Viewer.getLabelResources().getString("consensusMenu")).requireDisabled();
		window.menuItemWithPath(Viewer.getLabelResources().getString("menuFile"), Viewer.getLabelResources().getString("menuItemReadFromPosition")).requireEnabled();
	}
}
