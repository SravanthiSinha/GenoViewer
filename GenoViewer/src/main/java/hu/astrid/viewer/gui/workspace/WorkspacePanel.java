/*
 * This file is part of GenoViewer.
 *
 * GenoViewer is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * GenoViewer is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with GenoViewer.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * WorkspacePanel.java
 *
 * Created on 2010.05.12., 10:00:30
 */
package hu.astrid.viewer.gui.workspace;

import hu.astrid.mvc.swing.AbstractView;
import hu.astrid.viewer.Viewer;
import hu.astrid.viewer.model.Project;
import hu.astrid.viewer.model.WorkspaceModel;
import hu.astrid.viewer.util.FileTypes;
import hu.astrid.viewer.util.JFileFilters;
import java.awt.Component;
import java.awt.event.MouseAdapter;

import java.awt.event.MouseEvent;
import java.beans.PropertyChangeEvent;
import java.io.File;
import java.text.MessageFormat;
import java.util.Enumeration;
import java.util.List;

import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.SwingUtilities;
import javax.swing.ToolTipManager;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import org.apache.log4j.Logger;

/**
 *
 * @author OTTO and zsdoma
 */
public class WorkspacePanel extends javax.swing.JPanel implements AbstractView {

	/**
	 *
	 */
	private static final long serialVersionUID = 1L;
	private DefaultMutableTreeNode dmTreeNode;
	private boolean noWorkspace = true;
	private static final Logger logger = Logger.getLogger(WorkspacePanel.class);

	/** Creates new form WorkspacePanel */
	public WorkspacePanel() {
		initComponents();
		workspaceTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
		workspaceTree.setCellRenderer(new DefaultTreeCellRenderer() {

			@Override
			public Component getTreeCellRendererComponent(JTree tree, Object value, boolean sel, boolean expanded, boolean leaf, int row, boolean hasFocus) {
				IndexedNode node = value instanceof IndexedNode ? (IndexedNode) value : null;
				if (node != null) {
					setToolTipText(node.getFilePath());
				}
				return super.getTreeCellRendererComponent(tree, value, sel, expanded, leaf, row, hasFocus);
			}
		});
		ToolTipManager.sharedInstance().registerComponent(workspaceTree);
	}

	private void loadHierarchy(List<Project> projects) {
		DefaultTreeModel treeModel;
		dmTreeNode = new DefaultMutableTreeNode("root");
		ProjectNode project;
		for (int i = 0; i < projects.size(); ++i) {
			project = new ProjectNode(projects.get(i), i);
			dmTreeNode.add(project);
		}
		treeModel = new DefaultTreeModel(dmTreeNode);
		workspaceTree.setModel(treeModel);
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        openSamDialog = new javax.swing.JFileChooser();
        openBamDialog = new javax.swing.JFileChooser();
        openGffDialog = new javax.swing.JFileChooser();
        deleteFilesPopupMenu = new javax.swing.JPopupMenu();
        deleteFilePopupMenuItem = new javax.swing.JMenuItem();
        addProjectPopupMenu = new javax.swing.JPopupMenu();
        newProjectPopupMenuItem = new javax.swing.JMenuItem();
        openFastaDialog = new javax.swing.JFileChooser();
        projectManagerPopupMenu = new javax.swing.JPopupMenu();
        openProjectMenuItem = new javax.swing.JMenuItem();
        addFastaPopupMenuItem = new javax.swing.JMenuItem();
        addSamPopupMenuItem = new javax.swing.JMenuItem();
        addBamPopupMenuItem = new javax.swing.JMenuItem();
        addGffPopupMenuItem = new javax.swing.JMenuItem();
        renameProjectPopupMenuItem = new javax.swing.JMenuItem();
        deleteProject = new javax.swing.JMenuItem();
        treeScrollPane = new javax.swing.JScrollPane();
        workspaceTree = new javax.swing.JTree();
        addNewProjectButton = new javax.swing.JButton();
        addFilesButton = new javax.swing.JButton();
        workspaceNameLabel = new javax.swing.JLabel();

        openSamDialog.setCurrentDirectory(Viewer.getApplicationProperties().getLastOpenedDirectory(FileTypes.SAM));
        openSamDialog.setFileSelectionMode(javax.swing.JFileChooser.FILES_ONLY);
        openSamDialog.setFileFilter(JFileFilters.SAM_FILTER);

        openBamDialog.setCurrentDirectory(Viewer.getApplicationProperties().getLastOpenedDirectory(FileTypes.BAM));
        openBamDialog.setFileSelectionMode(javax.swing.JFileChooser.FILES_ONLY);
        openBamDialog.setFileFilter(JFileFilters.BAM_FILTER);

        openGffDialog.setCurrentDirectory(Viewer.getApplicationProperties().getLastOpenedDirectory(FileTypes.GFF));
        openGffDialog.setFileSelectionMode(javax.swing.JFileChooser.FILES_ONLY);
        openGffDialog.setFileFilter(JFileFilters.GFF_FILTER);

        deleteFilePopupMenuItem.setText(Viewer.getLabelResources().getString("deleteProjectFile")); // NOI18N
        deleteFilePopupMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteFilePopupMenuItemActionPerformed(evt);
            }
        });
        deleteFilesPopupMenu.add(deleteFilePopupMenuItem);

        workspaceTree.add(deleteFilesPopupMenu);
        workspaceTree.add(addProjectPopupMenu);

        newProjectPopupMenuItem.setText(Viewer.getLabelResources().getString("newProjectPopup")); // NOI18N
        newProjectPopupMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jNewProjectButtonActionPerformed(evt);
            }
        });
        addProjectPopupMenu.add(newProjectPopupMenuItem);

        openFastaDialog.setCurrentDirectory(Viewer.getApplicationProperties().getLastOpenedDirectory(FileTypes.FASTA));
        openFastaDialog.setFileSelectionMode(javax.swing.JFileChooser.FILES_ONLY);
        openFastaDialog.setFileFilter(JFileFilters.FASTA_FILTER);

        openProjectMenuItem.setText(Viewer.getLabelResources().getString("openProject")); // NOI18N
        openProjectMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openProjectMenuItemActionPerformed(evt);
            }
        });
        projectManagerPopupMenu.add(openProjectMenuItem);

        addFastaPopupMenuItem.setText(Viewer.getLabelResources().getString("addFastaFile")); // NOI18N
        addFastaPopupMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAddFastaButtonActionPerformed(evt);
            }
        });
        projectManagerPopupMenu.add(addFastaPopupMenuItem);

        addSamPopupMenuItem.setText(Viewer.getLabelResources().getString("addSamFile")); // NOI18N
        addSamPopupMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAddSamButtonActionPerformed(evt);
            }
        });
        projectManagerPopupMenu.add(addSamPopupMenuItem);

        addBamPopupMenuItem.setText(Viewer.getLabelResources().getString("addBamFile")); // NOI18N
        addBamPopupMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAddBamButtonActionPerformed(evt);
            }
        });
        projectManagerPopupMenu.add(addBamPopupMenuItem);

        addGffPopupMenuItem.setText(Viewer.getLabelResources().getString("addGffFile")); // NOI18N
        addGffPopupMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAddGffButtonActionPerformed(evt);
            }
        });
        projectManagerPopupMenu.add(addGffPopupMenuItem);

        renameProjectPopupMenuItem.setText(Viewer.getLabelResources().getString("renameProjectFile")); // NOI18N
        renameProjectPopupMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renameProjectPopupMenuItemActionPerformed(evt);
            }
        });
        projectManagerPopupMenu.add(renameProjectPopupMenuItem);

        deleteProject.setText(Viewer.getLabelResources().getString("deleteProject")); // NOI18N
        deleteProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteProjectActionPerformed(evt);
            }
        });
        projectManagerPopupMenu.add(deleteProject);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        workspaceTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        workspaceTree.setRootVisible(false);
        workspaceTree.setShowsRootHandles(true);
        workspaceTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                workspaceTreeMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                workspaceTreeMouseReleased(evt);
            }
        });
        treeScrollPane.setViewportView(workspaceTree);

        addNewProjectButton.setText(Viewer.getLabelResources().getString("addNewProject")); // NOI18N
        addNewProjectButton.setToolTipText("");
        addNewProjectButton.setBorder(null);
        addNewProjectButton.setFocusable(false);
        addNewProjectButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addNewProjectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewProjectButtonActionPerformed(evt);
            }
        });

        addFilesButton.setText(Viewer.getLabelResources().getString("addFilesToProject")); // NOI18N
        addFilesButton.setToolTipText("");
        addFilesButton.setBorder(null);
        addFilesButton.setFocusable(false);
        addFilesButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        //addFilesButton.add(popupproba);
        addFilesButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addFilesButtonMouseClicked(evt);
            }
        });

        workspaceNameLabel.setFont(new java.awt.Font("Tahoma", 0, 14));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(treeScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                    .addComponent(workspaceNameLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addNewProjectButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addFilesButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(workspaceNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addNewProjectButton)
                    .addComponent(addFilesButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(treeScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 510, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

        private void jAddFastaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAddFastaButtonActionPerformed
			int returnVal = openFastaDialog.showOpenDialog(Viewer.getMainWindow());
			if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
				Viewer.getController().addFileToProject(openFastaDialog.getSelectedFile(), FileTypes.FASTA, getSelectedProjectIndex());
			}
        }//GEN-LAST:event_jAddFastaButtonActionPerformed

        private void jAddSamButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAddSamButtonActionPerformed
			int returnVal = openSamDialog.showOpenDialog(Viewer.getMainWindow());
			if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
				Viewer.getController().addFileToProject(openSamDialog.getSelectedFile(), FileTypes.SAM, getSelectedProjectIndex());
			}
        }//GEN-LAST:event_jAddSamButtonActionPerformed

        private void jAddGffButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAddGffButtonActionPerformed
			int returnVal = openGffDialog.showOpenDialog(Viewer.getMainWindow());
			if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
				Viewer.getController().addFileToProject(openGffDialog.getSelectedFile(), FileTypes.GFF, getSelectedProjectIndex());
			}
        }//GEN-LAST:event_jAddGffButtonActionPerformed

        private void jAddBamButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAddBamButtonActionPerformed
			int returnVal = openBamDialog.showOpenDialog(Viewer.getMainWindow());
			if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
				Viewer.getController().addFileToProject(openBamDialog.getSelectedFile(), FileTypes.BAM, getSelectedProjectIndex());
			}
        }//GEN-LAST:event_jAddBamButtonActionPerformed

        private void jNewProjectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jNewProjectButtonActionPerformed
			String projectName = "";
			String initMessage = "";
			while (projectName.equals("")) {
				projectName = JOptionPane.showInputDialog(Viewer.getMainWindow(), Viewer.getLabelResources().getString("workspceNewProject"), initMessage);
				if (projectName != null) {
					if (projectName.equals("") || projectName.equals(Viewer.getLabelResources().getString("inputCorrupted"))) {
						initMessage = Viewer.getLabelResources().getString("inputCorrupted");
						projectName = "";
					} else {
						Viewer.getController().setModelProperty(WorkspaceModel.WORKSPACE_NEW_PROJECT, projectName);
					}
				} else {
					break;
				}
			}
    	}//GEN-LAST:event_jNewProjectButtonActionPerformed

		private void addNewProjectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewProjectButtonActionPerformed
			jNewProjectButtonActionPerformed(evt);
		}//GEN-LAST:event_addNewProjectButtonActionPerformed

		private void deleteFilePopupMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteFilePopupMenuItemActionPerformed
			if (workspaceTree.getSelectionPath().getPathCount() > 2) {
				String file = workspaceTree.getSelectionPath().getLastPathComponent().toString();
				String extension = file.substring(file.lastIndexOf(".") + 1, file.length());
				Viewer.getController().setModelProperty(WorkspaceModel.PROJECT_FILE_REMOVE, extension.equalsIgnoreCase("fasta") || extension.equalsIgnoreCase("fna") ? "fasta" : extension, getSelectedProjectIndex());
			}
		}//GEN-LAST:event_deleteFilePopupMenuItemActionPerformed

		private void renameProjectPopupMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_renameProjectPopupMenuItemActionPerformed
			String newProjectName = "";
			String initMessage = workspaceTree.getSelectionPath().getLastPathComponent().toString();
			while (newProjectName.equals("")) {
				newProjectName = JOptionPane.showInputDialog(Viewer.getMainWindow(), Viewer.getLabelResources().getString("rename"), initMessage);
				if (newProjectName != null) {
					if (newProjectName.equals("")) {
						initMessage = workspaceTree.getSelectionPath().getLastPathComponent().toString();
						newProjectName = "";
					} else {
						Viewer.getController().setModelProperty(WorkspaceModel.PROJECT_NAME, newProjectName, getSelectedProjectIndex());
					}
				} else {
					break;
				}
			}
		}//GEN-LAST:event_renameProjectPopupMenuItemActionPerformed

		private void deleteProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteProjectActionPerformed
			ProjectNode node = (ProjectNode) workspaceTree.getSelectionPath().getLastPathComponent();
			int deletedIndex = node.index;
			int decision = JOptionPane.showConfirmDialog(Viewer.getMainWindow(), MessageFormat.format(Viewer.getLabelResources().getString("sureDeleteProject"), workspaceTree.getSelectionPath().getLastPathComponent().toString()));
			if (decision == JOptionPane.OK_OPTION) {
				Viewer.getController().setModelProperty(WorkspaceModel.WORKSPACE_PROJECT_DELETED, deletedIndex);
			}
		}//GEN-LAST:event_deleteProjectActionPerformed

		private void openProjectMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openProjectMenuItemActionPerformed
			ProjectNode node = (ProjectNode) workspaceTree.getSelectionPath().getLastPathComponent();
			int index = node.index;
			Viewer.getController().setModelProperty(WorkspaceModel.WORKSPACE_PROJECT_CHANGE, index);
		}//GEN-LAST:event_openProjectMenuItemActionPerformed

		private void workspaceTreeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_workspaceTreeMousePressed
			TreePath selPath = workspaceTree.getPathForLocation(evt.getX(), evt.getY());
			workspaceTree.setSelectionPath(selPath);
			if (evt.getButton() == MouseEvent.BUTTON1) {
				if (selPath == null || selPath.getPathCount() < 0) {
					return;
				}
				final Object lastNode = selPath.getLastPathComponent();
				if (evt.getClickCount() == 2 && lastNode != null && lastNode instanceof ProjectNode) {
					final int index = ((ProjectNode) selPath.getLastPathComponent()).getIndex();
					Viewer.getController().setModelProperty(WorkspaceModel.WORKSPACE_PROJECT_CHANGE, index);
				}
			}
		}//GEN-LAST:event_workspaceTreeMousePressed

		private void workspaceTreeMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_workspaceTreeMouseReleased
			if (evt.getButton() == MouseEvent.BUTTON3) {
				TreePath selPath = workspaceTree.getPathForLocation(evt.getX(), evt.getY());
				workspaceTree.setSelectionPath(selPath);
				if (selPath == null || selPath.getPathCount() < 0) {
					addProjectPopupMenu.show((JComponent) evt.getSource(), evt.getX(), evt.getY());
					return;
				}
				if (selPath.getLastPathComponent() instanceof FileNode) {
					int row = workspaceTree.getRowForLocation(evt.getX(), evt.getY());
					if (!workspaceTree.isSelectionEmpty()) {
						if (row == workspaceTree.getSelectionRows()[0]) {
							deleteFilesPopupMenu.show((JComponent) evt.getSource(), evt.getX(), evt.getY());
						} else {
							workspaceTree.removeSelectionRow(workspaceTree.getSelectionRows()[0]);
							addProjectPopupMenu.show((JComponent) evt.getSource(), evt.getX(), evt.getY());
						}
					} else {
					}
				} else {
					openProjectMenuItem.setVisible(true);
					projectManagerPopupMenu.show((Component) evt.getSource(), evt.getX(), evt.getY());
				}
			}
		}//GEN-LAST:event_workspaceTreeMouseReleased

		private void addFilesButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addFilesButtonMouseClicked
			if (noWorkspace) {
				JOptionPane.showMessageDialog(Viewer.getMainWindow(), Viewer.getLabelResources().getString("workspaceOpenError"));
			} else if (!workspaceTree.isSelectionEmpty()) {
				openProjectMenuItem.setVisible(false);
				projectManagerPopupMenu.show(workspaceTree.getParent(), evt.getX(), evt.getY());
			} else {
				JOptionPane.showMessageDialog(Viewer.getMainWindow(), Viewer.getLabelResources().getString("addFilesToProjectExp"));
			}
		}//GEN-LAST:event_addFilesButtonMouseClicked

	/**
	 *
	 * @return index of selected project or project index of file
	 */
	private int getSelectedProjectIndex() {
		return ((IndexedNode) workspaceTree.getSelectionPath().getLastPathComponent()).getIndex();
	}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem addBamPopupMenuItem;
    private javax.swing.JMenuItem addFastaPopupMenuItem;
    private javax.swing.JButton addFilesButton;
    private javax.swing.JMenuItem addGffPopupMenuItem;
    private javax.swing.JButton addNewProjectButton;
    private javax.swing.JPopupMenu addProjectPopupMenu;
    private javax.swing.JMenuItem addSamPopupMenuItem;
    private javax.swing.JMenuItem deleteFilePopupMenuItem;
    private javax.swing.JPopupMenu deleteFilesPopupMenu;
    private javax.swing.JMenuItem deleteProject;
    private javax.swing.JMenuItem newProjectPopupMenuItem;
    private javax.swing.JFileChooser openBamDialog;
    private javax.swing.JFileChooser openFastaDialog;
    private javax.swing.JFileChooser openGffDialog;
    private javax.swing.JMenuItem openProjectMenuItem;
    private javax.swing.JFileChooser openSamDialog;
    private javax.swing.JPopupMenu projectManagerPopupMenu;
    private javax.swing.JMenuItem renameProjectPopupMenuItem;
    private javax.swing.JScrollPane treeScrollPane;
    private javax.swing.JLabel workspaceNameLabel;
    private javax.swing.JTree workspaceTree;
    // End of variables declaration//GEN-END:variables

	@SuppressWarnings("unchecked")
	@Override
	public void modelPropertyChange(final PropertyChangeEvent evt) {

		SwingUtilities.invokeLater(new Runnable() {

			@Override
			public void run() {
				if ((evt.getPropertyName().equals(WorkspaceModel.WORKSPACE_NEW_PROJECT)&& evt.getNewValue()!=null)
						|| evt.getPropertyName().equals(WorkspaceModel.WORKSPACE_PROJECT_DELETED)
						|| evt.getPropertyName().equals(WorkspaceModel.PROJECT_NEW_FILE)
						|| evt.getPropertyName().equals(WorkspaceModel.PROJECT_NAME)
						|| evt.getPropertyName().equals(WorkspaceModel.PROJECT_FILE_REMOVE)) {

					Enumeration<TreePath> e = workspaceTree.getExpandedDescendants(new TreePath(workspaceTree.getModel().getRoot()));
					loadHierarchy((List<Project>) evt.getNewValue());
					if (e != null) {
						while (e.hasMoreElements()) {
							TreePath path = e.nextElement();
							Enumeration<ProjectNode> p = ((DefaultMutableTreeNode) workspaceTree.getModel().getRoot()).children();
							while (p.hasMoreElements()) {
								ProjectNode project = p.nextElement();
								if (project.equals(path.getLastPathComponent())) {
									workspaceTree.expandPath(new TreePath(project.getPath()));
								}
							}

						}
					}
				}else if(evt.getPropertyName().equals(WorkspaceModel.WORKSPACE_NEW_PROJECT)&& evt.getNewValue()==null){
					String message=MessageFormat.format(Viewer.getLabelResources().getString("workspaceProjectExsit"), evt.getOldValue());
					JOptionPane.showMessageDialog(Viewer.getMainWindow(), message,Viewer.getLabelResources().getString("dialogTitleWarning"),JOptionPane.WARNING_MESSAGE);
				}
				else if (evt.getPropertyName().equals(WorkspaceModel.WORKSPACE_LOAD)) {
					loadHierarchy((List<Project>) evt.getNewValue());
					noWorkspace = false;
				} else if (evt.getPropertyName().equals(WorkspaceModel.WORKSPACE_PROJECT_CHANGE)) {
					Integer projectIndex = (Integer) evt.getOldValue();
					Enumeration<ProjectNode> p = ((DefaultMutableTreeNode) workspaceTree.getModel().getRoot()).children();
					while (p.hasMoreElements()) {
						ProjectNode project = p.nextElement();
						if (project.getIndex() == projectIndex) {
							workspaceTree.expandPath(new TreePath(project.getPath()));
							break;
						}
					}
				}
			}
		});


	}

	public void refreshI18N() {
		openFastaDialog.updateUI();
		openSamDialog.updateUI();
		openBamDialog.updateUI();
		openGffDialog.updateUI();
		openFastaDialog.setFileFilter(JFileFilters.FASTA_FILTER);
		openSamDialog.setFileFilter(JFileFilters.SAM_FILTER);
		openBamDialog.setFileFilter(JFileFilters.BAM_FILTER);
		openGffDialog.setFileFilter(JFileFilters.GFF_FILTER);
		addNewProjectButton.setText(Viewer.getLabelResources().getString("addNewProject"));
		addFilesButton.setText(Viewer.getLabelResources().getString("addFilesToProject"));
		deleteFilePopupMenuItem.setText(Viewer.getLabelResources().getString("deleteProjectFile"));
		newProjectPopupMenuItem.setText(Viewer.getLabelResources().getString("newProjectPopup"));
		addFastaPopupMenuItem.setText(Viewer.getLabelResources().getString("addFastaFile"));
		addSamPopupMenuItem.setText(Viewer.getLabelResources().getString("addSamFile"));
		addBamPopupMenuItem.setText(Viewer.getLabelResources().getString("addBamFile"));
		addGffPopupMenuItem.setText(Viewer.getLabelResources().getString("addGffFile"));
		renameProjectPopupMenuItem.setText(Viewer.getLabelResources().getString("renameProjectFile"));
		deleteProject.setText(Viewer.getLabelResources().getString("deleteProject"));
		openProjectMenuItem.setText(Viewer.getLabelResources().getString("openProject"));
	}

	private interface IndexedNode {

		/**
		 *
		 * @return project index in model
		 */
		int getIndex();

		/**
		 *
		 * @return path of underlying file
		 */
		String getFilePath();
	}

	/**
	 * Treenode for project
	 */
	private static class ProjectNode extends DefaultMutableTreeNode implements IndexedNode {

		private static final long serialVersionUID = 1L;
		/**Project index in model*/
		private final int index;
		private Project project;

		/**
		 * Create new project node. Contained files are added as children
		 * @param project
		 * @param index
		 */
		public ProjectNode(Project project, int index) {
			super(project.getName());
			this.index = index;
			this.project = project;

			for (File file : project.getFiles().values()) {
				this.add(new FileNode(file.getName(), file.getAbsolutePath(), index));
			}
		}

		@Override
		public int getIndex() {
			return index;
		}

		@Override
		public String getFilePath() {
			return null;
		}

		@Override
		public boolean equals(Object obj) {
			if (obj == null || !(obj instanceof ProjectNode)) {
				return false;
			}
			if (obj == this) {
				return true;
			}
			return this.project == ((ProjectNode) obj).project;
		}
	}

	/**
	 * Treenode for file in a project
	 */
	private static class FileNode extends DefaultMutableTreeNode implements IndexedNode {

		private static final long serialVersionUID = 1L;
		/** Index of containing project*/
		private final int index;
		private final String filePath;

		public FileNode(String name, String filePath, int projectIndex) {
			super(name);
			this.index = projectIndex;
			this.filePath = filePath;
		}

		@Override
		public int getIndex() {
			return index;
		}

		@Override
		public String getFilePath() {
			return filePath;
		}
	}
}
