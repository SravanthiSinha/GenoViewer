/*
 * This file is part of GenoViewer.
 *
 * GenoViewer is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * GenoViewer is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with GenoViewer.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MutationsDialog.java
 *
 * Created on 2010.07.14., 13:43:32
 */
package hu.astrid.viewer.gui.mutation;

import hu.astrid.mvc.swing.AbstractView;
import hu.astrid.viewer.Viewer;
import hu.astrid.viewer.model.ViewerReadModel;
import hu.astrid.viewer.model.mutation.Mutation;
import hu.astrid.viewer.model.mutation.MutationTableFilter;
import hu.astrid.viewer.model.mutation.MutationType;
import java.awt.Component;
import java.awt.Font;
import java.beans.PropertyChangeEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.ResourceBundle;
import javax.swing.InputVerifier;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.border.TitledBorder;
import javax.swing.table.TableCellRenderer;
import org.apache.log4j.Logger;

/**
 *
 * @author Szuni
 */
public class MutationsDialog extends javax.swing.JDialog implements AbstractView {

	private static final int TABLE_PAGE_SIZE = 100;
	private static final long serialVersionUID = 1L;
	private final InputVerifier numberVerifier = new InputVerifier() {

		@Override
		public boolean verify(JComponent input) {
			try {
				Integer.parseInt(pageTextField.getText());
				return true;
			} catch (NumberFormatException ex) {
				return false;
			}
		}
	};

	/** Creates new form MutationsDialog */
	public MutationsDialog() {
//        super(parent, modal);
		initComponents();
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        mutationsTable = new javax.swing.JTable();
        pagingPanel = new javax.swing.JPanel();
        prevButton = new javax.swing.JButton();
        pageTextField = new javax.swing.JTextField();
        nextButton = new javax.swing.JButton();
        filterPanel = new javax.swing.JPanel();
        typeFilterPanel = new javax.swing.JPanel();
        snpCheckBox = new javax.swing.JCheckBox();
        mnpCheckBox = new javax.swing.JCheckBox();
        insertionCheckBox = new javax.swing.JCheckBox();
        deletionCheckBox = new javax.swing.JCheckBox();
        coverageFilterPanel = new javax.swing.JPanel();
        minimumCoverageLabel = new javax.swing.JLabel();
        minimumCoverageSpinner = new javax.swing.JSpinner();
        maximumCoverageLabel = new javax.swing.JLabel();
        maximumCoverageSpinner = new javax.swing.JSpinner();
        filterButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(Viewer.getLabelResources().getString("mutationDialogTitle")); // NOI18N
        setFocusable(false);
        setName("mutationsDialog"); // NOI18N

        mutationsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Type", "Start position", "End position", "Length", "Coverage", "Reference sequence", "Read sequence"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        mutationsTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        mutationsTable.setName("mutationsTable"); // NOI18N
        mutationsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mutationsTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(mutationsTable);

        pagingPanel.setLayout(new java.awt.GridBagLayout());

        prevButton.setText(Viewer.getLabelResources().getString("mutationTablePrevious")); // NOI18N
        prevButton.setEnabled(false);
        prevButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        prevButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        prevButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        pagingPanel.add(prevButton, gridBagConstraints);

        pageTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        pageTextField.setText("0/0");
        pageTextField.setName("mutationPages"); // NOI18N
        pageTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pageTextFieldActionPerformed(evt);
            }
        });
        pageTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                pageTextFieldFocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.weightx = 1.0;
        pagingPanel.add(pageTextField, gridBagConstraints);

        nextButton.setText(Viewer.getLabelResources().getString("mutationTableNext")); // NOI18N
        nextButton.setEnabled(false);
        nextButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        nextButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        pagingPanel.add(nextButton, gridBagConstraints);

        filterPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        typeFilterPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(Viewer.getLabelResources().getString("mutationTableColumnType"))); // NOI18N

        snpCheckBox.setSelected(true);
        snpCheckBox.setText(Viewer.getLabelResources().getString("SNP")); // NOI18N

        mnpCheckBox.setSelected(true);
        mnpCheckBox.setText(Viewer.getLabelResources().getString("MNP")); // NOI18N

        insertionCheckBox.setSelected(true);
        insertionCheckBox.setText(Viewer.getLabelResources().getString("INSERTION")); // NOI18N

        deletionCheckBox.setSelected(true);
        deletionCheckBox.setText(Viewer.getLabelResources().getString("DELETION")); // NOI18N

        javax.swing.GroupLayout typeFilterPanelLayout = new javax.swing.GroupLayout(typeFilterPanel);
        typeFilterPanel.setLayout(typeFilterPanelLayout);
        typeFilterPanelLayout.setHorizontalGroup(
            typeFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(typeFilterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(snpCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mnpCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(insertionCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deletionCheckBox)
                .addContainerGap(355, Short.MAX_VALUE))
        );
        typeFilterPanelLayout.setVerticalGroup(
            typeFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(typeFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(snpCheckBox)
                .addComponent(mnpCheckBox)
                .addComponent(insertionCheckBox)
                .addComponent(deletionCheckBox))
        );

        coverageFilterPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(Viewer.getLabelResources().getString("mutationTableColumnCoverage"))); // NOI18N

        minimumCoverageLabel.setLabelFor(minimumCoverageSpinner);
        minimumCoverageLabel.setText(Viewer.getLabelResources().getString("mutationTableMinimumCoverage")); // NOI18N

        minimumCoverageSpinner.setModel(new javax.swing.SpinnerNumberModel(0.0d, 0.0d, 1.0d, 0.01d));
        minimumCoverageSpinner.setEditor(new javax.swing.JSpinner.NumberEditor(minimumCoverageSpinner, "###.##%"));
        minimumCoverageSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                minimumCoverageSpinnerStateChanged(evt);
            }
        });

        maximumCoverageLabel.setLabelFor(maximumCoverageSpinner);
        maximumCoverageLabel.setText(Viewer.getLabelResources().getString("mutationTableMaximumCoverage")); // NOI18N
        maximumCoverageLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        maximumCoverageSpinner.setModel(new javax.swing.SpinnerNumberModel(1.0d, 0.0d, 1.0d, 0.01d));
        maximumCoverageSpinner.setEditor(new javax.swing.JSpinner.NumberEditor(maximumCoverageSpinner, "###.##%"));
        maximumCoverageSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                maximumCoverageSpinnerStateChanged(evt);
            }
        });

        javax.swing.GroupLayout coverageFilterPanelLayout = new javax.swing.GroupLayout(coverageFilterPanel);
        coverageFilterPanel.setLayout(coverageFilterPanelLayout);
        coverageFilterPanelLayout.setHorizontalGroup(
            coverageFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(coverageFilterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(minimumCoverageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(minimumCoverageSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(maximumCoverageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(maximumCoverageSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(365, Short.MAX_VALUE))
        );
        coverageFilterPanelLayout.setVerticalGroup(
            coverageFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(coverageFilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(minimumCoverageLabel)
                .addComponent(maximumCoverageSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(minimumCoverageSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(maximumCoverageLabel))
        );

        filterButton.setText(Viewer.getLabelResources().getString("mutationTableApplyFilter")); // NOI18N
        filterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterButtonActionPerformed(evt);
            }
        });

        resetButton.setText(Viewer.getLabelResources().getString("mutationTableResetFilter")); // NOI18N
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout filterPanelLayout = new javax.swing.GroupLayout(filterPanel);
        filterPanel.setLayout(filterPanelLayout);
        filterPanelLayout.setHorizontalGroup(
            filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(coverageFilterPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(typeFilterPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(filterPanelLayout.createSequentialGroup()
                        .addComponent(filterButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resetButton)))
                .addContainerGap())
        );
        filterPanelLayout.setVerticalGroup(
            filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(typeFilterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(coverageFilterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filterButton)
                    .addComponent(resetButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(filterPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pagingPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 625, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 625, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pagingPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void mutationsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mutationsTableMouseClicked
		Viewer.getMainWindow().scrollToPosition((Integer) mutationsTable.getModel().getValueAt(mutationsTable.getSelectedRow(), 1));
	}//GEN-LAST:event_mutationsTableMouseClicked

	private void prevButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevButtonActionPerformed
		final PagingModel model = (PagingModel) mutationsTable.getModel();
		model.pagePrevious();

		// If we hit the top of the data, disable the up button.
		if (model.getPageOffset() == 0) {
			prevButton.setEnabled(false);
		}
		nextButton.setEnabled(true);
		updateTable(model);
	}//GEN-LAST:event_prevButtonActionPerformed

	private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
		final PagingModel model = (PagingModel) mutationsTable.getModel();
		model.pageNext();

		// If we hit the bottom of the data, disable the down button.
		if (model.getPageOffset() == (model.getPageCount() - 1)) {
			nextButton.setEnabled(false);
		}
		prevButton.setEnabled(true);
		updateTable(model);
	}

	private void updateTable(final PagingModel model) {
		pageTextField.setText(model.getPageOffset() + 1 + "/" + model.getPageCount());
		pageTextField.setPreferredSize(pageTextField.getUI().getPreferredSize(pageTextField));
		pagingPanel.revalidate();
		jScrollPane1.getVerticalScrollBar().setValue(0);
	}//GEN-LAST:event_nextButtonActionPerformed

	private void pageTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pageTextFieldActionPerformed
		final PagingModel model = (PagingModel) mutationsTable.getModel();
		try {
			int pageIndex = Integer.parseInt(pageTextField.getText()) - 1;
			if (model.setPage(pageIndex)) {
				updateTable(model);
				nextButton.setEnabled(pageIndex < model.getPageCount() - 1);
				prevButton.setEnabled(pageIndex > 0);
				mutationsTable.requestFocusInWindow();
			}
		} catch (NumberFormatException ex) {
			pageTextField.setText(model.getPageOffset() + 1 + "/" + model.getPageCount());
		}
	}//GEN-LAST:event_pageTextFieldActionPerformed

	private void pageTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_pageTextFieldFocusGained
		pageTextField.setSelectionStart(0);
		pageTextField.setSelectionEnd(pageTextField.getText().length());
	}//GEN-LAST:event_pageTextFieldFocusGained

	private void minimumCoverageSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_minimumCoverageSpinnerStateChanged
		((SpinnerNumberModel) maximumCoverageSpinner.getModel()).setMinimum((Double) minimumCoverageSpinner.getValue());
	}//GEN-LAST:event_minimumCoverageSpinnerStateChanged

	private void maximumCoverageSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_maximumCoverageSpinnerStateChanged
		((SpinnerNumberModel) minimumCoverageSpinner.getModel()).setMaximum((Double) maximumCoverageSpinner.getValue());
	}//GEN-LAST:event_maximumCoverageSpinnerStateChanged

	private void filterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterButtonActionPerformed
		Viewer.startStatusbarJob(Viewer.getLabelResources().getString("statusbarMessageFilteringMutations"));

		this.setEnabled(false);
		new SwingWorker<Void, Object>() {

			Throwable throwable = null;

			@Override
			protected Void doInBackground() throws Exception {
				ArrayList<MutationType> list = new ArrayList<MutationType>();
				if (snpCheckBox.isSelected()) {
					list.add(MutationType.SNP);
				}
				if (mnpCheckBox.isSelected()) {
					list.add(MutationType.MNP);
				}
				if (insertionCheckBox.isSelected()) {
					list.add(MutationType.INSERTION);
				}
				if (deletionCheckBox.isSelected()) {
					list.add(MutationType.DELETION);
				}
				try {
					Viewer.getController().setModelProperty(ViewerReadModel.MUTATIONS_FILTER, new MutationTableFilter(list, (Double) minimumCoverageSpinner.getValue(), (Double) maximumCoverageSpinner.getValue()));
				} catch (Throwable th) {
					this.throwable = th;
				}
				return null;
			}

			@Override
			protected void done() {
				if (throwable != null) {
					Logger.getLogger(MutationsDialog.class).error(throwable.getMessage(), throwable);
				}
				Viewer.stopStatusbarJob(Viewer.getLabelResources().getString("statusbarMessageFilteringMutations"));
				MutationsDialog.this.setEnabled(true);
			}
		}.execute();

	}//GEN-LAST:event_filterButtonActionPerformed

	private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
		snpCheckBox.setSelected(true);
		mnpCheckBox.setSelected(true);
		insertionCheckBox.setSelected(true);
		deletionCheckBox.setSelected(true);
		maximumCoverageSpinner.setValue(1.0);
		minimumCoverageSpinner.setValue(0.0);
		filterButtonActionPerformed(evt);
	}//GEN-LAST:event_resetButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel coverageFilterPanel;
    private javax.swing.JCheckBox deletionCheckBox;
    private javax.swing.JButton filterButton;
    private javax.swing.JPanel filterPanel;
    private javax.swing.JCheckBox insertionCheckBox;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel maximumCoverageLabel;
    private javax.swing.JSpinner maximumCoverageSpinner;
    private javax.swing.JLabel minimumCoverageLabel;
    private javax.swing.JSpinner minimumCoverageSpinner;
    private javax.swing.JCheckBox mnpCheckBox;
    private javax.swing.JTable mutationsTable;
    private javax.swing.JButton nextButton;
    private javax.swing.JTextField pageTextField;
    private javax.swing.JPanel pagingPanel;
    private javax.swing.JButton prevButton;
    private javax.swing.JButton resetButton;
    private javax.swing.JCheckBox snpCheckBox;
    private javax.swing.JPanel typeFilterPanel;
    // End of variables declaration//GEN-END:variables

	@Override
	public void modelPropertyChange(final PropertyChangeEvent evt) {
		if (evt.getPropertyName().equals(ViewerReadModel.MUTATIONS_LOAD)) {
			final PagingModel model;
			@SuppressWarnings("unchecked")
			List<Mutation> mutations = (List<Mutation>) evt.getNewValue();

			//Regeneration only if no previous model present
			if (evt.getNewValue() != null && mutationsTable.getModel().getRowCount() != mutations.size()) {
				final ResourceBundle labelResources = Viewer.getLabelResources();

				final Object[] tableColumnNames = {labelResources.getString("mutationTableColumnType"),
					labelResources.getString("mutationTableColumnStartPosition"),
					labelResources.getString("mutationTableColumnEndPosition"),
					labelResources.getString("mutationTableColumnLength"),
					labelResources.getString("mutationTableColumnCoverage"),
					labelResources.getString("mutationTableColumnReferenceSequence"),
					labelResources.getString("mutationTableColumnReadSequence")};

				final Object[][] tableRowData = new Object[mutations.size()][7];
				for (int i = 0; i < mutations.size(); i++) {
					tableRowData[i][0] = mutations.get(i).getMutationType();
					tableRowData[i][1] = mutations.get(i).getStartPos();
					tableRowData[i][2] = mutations.get(i).getStartPos() + mutations.get(i).getLength() - 1;
					tableRowData[i][3] = mutations.get(i).getLength();
					tableRowData[i][4] = mutations.get(i).getVerboseCoverage();
					tableRowData[i][5] = mutations.get(i).getReferenceSequence();
					tableRowData[i][6] = mutations.get(i).getDisplayedMutationSequence();
				}

				model = new PagingModel(tableColumnNames, tableRowData, TABLE_PAGE_SIZE);
			} else {
				model = null;
			}

			SwingUtilities.invokeLater(new Runnable() {

				@Override
				public void run() {

					if (model != null) {
						mutationsTable.setModel(model);
						for (int i = 0; i < mutationsTable.getColumnModel().getColumnCount(); ++i) {
							mutationsTable.getColumnModel().getColumn(i).setHeaderRenderer(new HeaderRenderer());
							mutationsTable.getColumnModel().getColumn(i).setCellRenderer(new CellRenderer());
						}
						mutationsTable.getColumnModel().getColumn(0).setCellRenderer(new MutationTypeCellRenderer());
						prevButton.setEnabled(false);
						nextButton.setEnabled(model.getPageCount() > 1);

						mutationsTable.getColumnModel().getColumn(0).setPreferredWidth(30);
						mutationsTable.getColumnModel().getColumn(1).setPreferredWidth(50);
						mutationsTable.getColumnModel().getColumn(2).setPreferredWidth(50);
						mutationsTable.getColumnModel().getColumn(3).setPreferredWidth(20);
						mutationsTable.getColumnModel().getColumn(4).setPreferredWidth(30);

						mutationsTable.doLayout();

						pageTextField.setText("1/" + model.getPageCount());

						jScrollPane1.setRowHeaderView(new RowNumberTable(mutationsTable));
					}

					if (evt.getNewValue() != null && !MutationsDialog.this.isVisible()) {
						MutationsDialog.this.pack();
						MutationsDialog.this.setLocationRelativeTo(Viewer.getMainWindow());
						MutationsDialog.this.setVisible(true);
					} else if (evt.getNewValue() == null) {
						MutationsDialog.this.setVisible(false);
						mutationsTable.setModel(new javax.swing.table.DefaultTableModel(
								new Object[][]{},
								new String[]{
									"Type", "Start position", "End position", "Length", "Coverage", "Reference sequence", "Read sequence"
								}));
					}

				}
			});

		}
	}

	public void refreshI18N() {
		this.setTitle(Viewer.getLabelResources().getString("mutationDialogTitle"));
		this.prevButton.setText(Viewer.getLabelResources().getString("mutationTablePrevious"));
		this.nextButton.setText(Viewer.getLabelResources().getString("mutationTableNext"));
		mutationsTable.getTableHeader().getColumnModel().getColumn(0).setHeaderValue(Viewer.getLabelResources().getString("mutationTableColumnType"));
		mutationsTable.getTableHeader().getColumnModel().getColumn(1).setHeaderValue(Viewer.getLabelResources().getString("mutationTableColumnStartPosition"));
		mutationsTable.getTableHeader().getColumnModel().getColumn(2).setHeaderValue(Viewer.getLabelResources().getString("mutationTableColumnEndPosition"));
		mutationsTable.getTableHeader().getColumnModel().getColumn(3).setHeaderValue(Viewer.getLabelResources().getString("mutationTableColumnLength"));
		mutationsTable.getTableHeader().getColumnModel().getColumn(4).setHeaderValue(Viewer.getLabelResources().getString("mutationTableColumnCoverage"));
		mutationsTable.getTableHeader().getColumnModel().getColumn(5).setHeaderValue(Viewer.getLabelResources().getString("mutationTableColumnReferenceSequence"));
		mutationsTable.getTableHeader().getColumnModel().getColumn(6).setHeaderValue(Viewer.getLabelResources().getString("mutationTableColumnReadSequence"));

		((TitledBorder) typeFilterPanel.getBorder()).setTitle(Viewer.getLabelResources().getString("mutationTableColumnType"));
		((TitledBorder) coverageFilterPanel.getBorder()).setTitle(Viewer.getLabelResources().getString("mutationTableColumnCoverage"));
		snpCheckBox.setText(Viewer.getLabelResources().getString("SNP"));
		mnpCheckBox.setText(Viewer.getLabelResources().getString("MNP"));
		insertionCheckBox.setText(Viewer.getLabelResources().getString("INSERTION"));
		deletionCheckBox.setText(Viewer.getLabelResources().getString("DELETION"));
		filterButton.setText(Viewer.getLabelResources().getString("mutationTableApplyFilter"));
		resetButton.setText(Viewer.getLabelResources().getString("mutationTableResetFilter"));
		minimumCoverageLabel.setText(Viewer.getLabelResources().getString("mutationTableMinimumCoverage"));
		maximumCoverageLabel.setText(Viewer.getLabelResources().getString("mutationTableMaximumCoverage"));

		this.repaint();
	}

	/**
	 * Header renderer that suppements default header renderer to show content
	 * if its not fully displayed.
	 */
	private static class HeaderRenderer implements TableCellRenderer {

		private static final long serialVersionUID = 1L;

		@Override
		public Component getTableCellRendererComponent(
				JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {

			JLabel header = (JLabel) table.getTableHeader().getDefaultRenderer().getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

			header.setHorizontalAlignment(JLabel.CENTER);

			if (table.getColumnModel().getColumn(column).getWidth() < header.getPreferredSize().width) {
				header.setToolTipText(header.getText());
			} else {
				header.setToolTipText(null);
			}

			if (isSelected) {
				header.setFont(header.getFont().deriveFont(Font.BOLD));
			}

			return header;
		}
	}

	/**
	 * Simple cell renderer that suppelents default renderer of cells to
	 * show content in tooltip if its not fully displayed
	 */
	private static class CellRenderer implements TableCellRenderer {

		private static final long serialVersionUID = 1L;

		@Override
		public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
			JLabel renderer = (JLabel) table.getDefaultRenderer(table.getColumnClass(column)).getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

			if (table.getColumnModel().getColumn(column).getWidth() < renderer.getPreferredSize().width) {
				renderer.setToolTipText(renderer.getText());
			} else {
				renderer.setToolTipText(null);
			}

			if (isSelected) {
				renderer.setFont(renderer.getFont().deriveFont(Font.BOLD));
			}

			return renderer;
		}
	}

	/**
	 * Mutation type cell renderer that displays internationalized values for
	 * {@link MutationType}, suppelents default renderer of cells to
	 * show content in tooltip if its not fully displayed
	 */
	private static class MutationTypeCellRenderer implements TableCellRenderer {

		private static final long serialVersionUID = 1L;

		@Override
		public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
			JLabel renderer = (JLabel) table.getDefaultRenderer(table.getColumnClass(column)).getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

			renderer.setText(Viewer.getLabelResources().getString(((MutationType) value).toString()));

			if (table.getColumnModel().getColumn(column).getWidth() < renderer.getPreferredSize().width) {
				renderer.setToolTipText(renderer.getText());
			} else {
				renderer.setToolTipText(null);
			}

			if (isSelected) {
				renderer.setFont(renderer.getFont().deriveFont(Font.BOLD));
			}

			return renderer;
		}
	}
}
