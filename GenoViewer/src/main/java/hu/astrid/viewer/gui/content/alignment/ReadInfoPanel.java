
/*
 * This file is part of GenoViewer.
 *
 * GenoViewer is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * GenoViewer is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with GenoViewer.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * ReadInfoPanel.java
 *
 * Created on 2010.04.06., 10:12:09
 */
package hu.astrid.viewer.gui.content.alignment;

import hu.astrid.mapping.model.AlignmentRecord;
import hu.astrid.viewer.Viewer;

import java.awt.Dimension;
import java.awt.Font;
import java.util.HashMap;
import java.util.Map;

import javax.swing.BorderFactory;
import javax.swing.JDialog;
import javax.swing.JTable;
import javax.swing.border.Border;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author OTTO
 */
public class ReadInfoPanel extends javax.swing.JPanel {

	private static final long serialVersionUID = 1L;

	public void refreshLabels() {
		flagLabel.setText(Viewer.getLabelResources().getString("flags"));
		alignmentLabel.setText(Viewer.getLabelResources().getString("alignmentText"));
		qualityLabel.setText(Viewer.getLabelResources().getString("quality"));
		mateInfoLabel.setText(Viewer.getLabelResources().getString("mateInfo"));
		cigarLabel.setText(Viewer.getLabelResources().getString("cigarstring"));
		MDTagLabel.setText(Viewer.getLabelResources().getString("mdtag"));
		startEndLabel.setText(Viewer.getLabelResources().getString("startendPosition"));
		mappingQualityLabel.setText(Viewer.getLabelResources().getString("mappingQuality"));
		advancedInfosToggleButton.setText(Viewer.getLabelResources().getString("advancedInfos"));
	}

	private static class MyTableModel extends DefaultTableModel {

		private static final long serialVersionUID = 1L;

		private MyTableModel(Object[][] qualityRowData, String[] string) {
			super(qualityRowData, string);
		}

		@Override
		public boolean isCellEditable(int row, int column) {
			return false;
		}
	}

	private Border emptyBorder = BorderFactory.createEmptyBorder(0, 0, 0, 0);
	private Font labelFont = new java.awt.Font(java.awt.Font.MONOSPACED, java.awt.Font.PLAIN, 17);

	/** Creates new form ReadInfoPanel */
	public ReadInfoPanel() {
		initComponents();
		alignmentText.setFont(labelFont);
		advancedPanel.setVisible(advancedInfosToggleButton.isSelected());
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        qualityLabel = new javax.swing.JLabel();
        qualityTableScrollPane = new javax.swing.JScrollPane();
        qualityTable = new javax.swing.JTable();
        alignmentPanel = new javax.swing.JPanel();
        alignmentLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        alignmentText = new javax.swing.JTextPane();
        startEndPanel = new javax.swing.JPanel();
        startEndLabel = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        startEndTextPane = new javax.swing.JTextPane();
        mappingQualityPanel = new javax.swing.JPanel();
        mappingQualityLabel = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        mappingQualityTextPane = new javax.swing.JTextPane();
        flagsPanel = new javax.swing.JPanel();
        flagLabel = new javax.swing.JLabel();
        flagTable = new javax.swing.JTable();
        mateInfoPanel = new javax.swing.JPanel();
        mateInfoLabel = new javax.swing.JLabel();
        mateInfoTable = new javax.swing.JTable();
        advancedInfosToggleButton = new javax.swing.JToggleButton();
        advancedPanel = new javax.swing.JPanel();
        mdTagPanel = new javax.swing.JPanel();
        MDTagLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        MDTagTextPane = new javax.swing.JTextPane();
        cigarPanel = new javax.swing.JPanel();
        cigarLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        cigarTextPane = new javax.swing.JTextPane();

        qualityLabel.setFont(new java.awt.Font("Tahoma", 1, 14));
        qualityLabel.setText(Viewer.getLabelResources().getString("quality")); // NOI18N

        qualityTableScrollPane.setPreferredSize(new java.awt.Dimension(170, 175));

        qualityTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Title 1", "Title 2"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        qualityTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        qualityTable.setAutoscrolls(false);
        qualityTableScrollPane.setViewportView(qualityTable);

        alignmentLabel.setFont(new java.awt.Font("Tahoma", 1, 14));
        alignmentLabel.setText(Viewer.getLabelResources().getString("alignmentText")); // NOI18N

        alignmentText.setEditable(false);
        jScrollPane1.setViewportView(alignmentText);

        javax.swing.GroupLayout alignmentPanelLayout = new javax.swing.GroupLayout(alignmentPanel);
        alignmentPanel.setLayout(alignmentPanelLayout);
        alignmentPanelLayout.setHorizontalGroup(
            alignmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(alignmentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(alignmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(alignmentLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        alignmentPanelLayout.setVerticalGroup(
            alignmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(alignmentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(alignmentLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        startEndLabel.setFont(new java.awt.Font("Tahoma", 1, 14));
        startEndLabel.setText(Viewer.getLabelResources().getString("startendPosition")); // NOI18N

        startEndTextPane.setEditable(false);
        jScrollPane4.setViewportView(startEndTextPane);

        javax.swing.GroupLayout startEndPanelLayout = new javax.swing.GroupLayout(startEndPanel);
        startEndPanel.setLayout(startEndPanelLayout);
        startEndPanelLayout.setHorizontalGroup(
            startEndPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(startEndPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(startEndPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(startEndLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        startEndPanelLayout.setVerticalGroup(
            startEndPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(startEndPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(startEndLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mappingQualityLabel.setFont(new java.awt.Font("Tahoma", 1, 14));
        mappingQualityLabel.setText(Viewer.getLabelResources().getString("mappingQuality")); // NOI18N

        mappingQualityTextPane.setEditable(false);
        jScrollPane5.setViewportView(mappingQualityTextPane);

        javax.swing.GroupLayout mappingQualityPanelLayout = new javax.swing.GroupLayout(mappingQualityPanel);
        mappingQualityPanel.setLayout(mappingQualityPanelLayout);
        mappingQualityPanelLayout.setHorizontalGroup(
            mappingQualityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mappingQualityPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mappingQualityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mappingQualityLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        mappingQualityPanelLayout.setVerticalGroup(
            mappingQualityPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mappingQualityPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mappingQualityLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        flagLabel.setFont(new java.awt.Font("Tahoma", 1, 14));
        flagLabel.setText(Viewer.getLabelResources().getString("flags")); // NOI18N

        flagTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        flagTable.setCellSelectionEnabled(true);

        javax.swing.GroupLayout flagsPanelLayout = new javax.swing.GroupLayout(flagsPanel);
        flagsPanel.setLayout(flagsPanelLayout);
        flagsPanelLayout.setHorizontalGroup(
            flagsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(flagsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(flagsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(flagLabel)
                    .addComponent(flagTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        flagsPanelLayout.setVerticalGroup(
            flagsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(flagsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(flagLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(flagTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mateInfoLabel.setFont(new java.awt.Font("Tahoma", 1, 14));
        mateInfoLabel.setText(Viewer.getLabelResources().getString("mateInfo")); // NOI18N

        mateInfoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Title 1", "Title 2"
            }
        ));
        mateInfoTable.setCellSelectionEnabled(true);

        javax.swing.GroupLayout mateInfoPanelLayout = new javax.swing.GroupLayout(mateInfoPanel);
        mateInfoPanel.setLayout(mateInfoPanelLayout);
        mateInfoPanelLayout.setHorizontalGroup(
            mateInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mateInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mateInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mateInfoLabel)
                    .addComponent(mateInfoTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        mateInfoPanelLayout.setVerticalGroup(
            mateInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mateInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mateInfoLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mateInfoTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        advancedInfosToggleButton.setSelected(Viewer.getActiveProfile().isAdvancedReadInfosDisplayed());
        advancedInfosToggleButton.setText(Viewer.getLabelResources().getString("advancedInfos")); // NOI18N
        advancedInfosToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                advancedInfosToggleButtonActionPerformed(evt);
            }
        });

        MDTagLabel.setFont(new java.awt.Font("Tahoma", 1, 14));
        MDTagLabel.setText(Viewer.getLabelResources().getString("mdtag")); // NOI18N

        MDTagTextPane.setEditable(false);
        MDTagTextPane.setEditable(false);
        jScrollPane3.setViewportView(MDTagTextPane);

        javax.swing.GroupLayout mdTagPanelLayout = new javax.swing.GroupLayout(mdTagPanel);
        mdTagPanel.setLayout(mdTagPanelLayout);
        mdTagPanelLayout.setHorizontalGroup(
            mdTagPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mdTagPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mdTagPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(MDTagLabel)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        mdTagPanelLayout.setVerticalGroup(
            mdTagPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mdTagPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(MDTagLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        MDTagLabel.getAccessibleContext().setAccessibleName("MD tag");

        cigarLabel.setFont(new java.awt.Font("Tahoma", 1, 14));
        cigarLabel.setText(Viewer.getLabelResources().getString("cigarstring")); // NOI18N

        cigarTextPane.setEditable(false);
        jScrollPane2.setViewportView(cigarTextPane);

        javax.swing.GroupLayout cigarPanelLayout = new javax.swing.GroupLayout(cigarPanel);
        cigarPanel.setLayout(cigarPanelLayout);
        cigarPanelLayout.setHorizontalGroup(
            cigarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cigarPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(cigarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cigarLabel)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        cigarPanelLayout.setVerticalGroup(
            cigarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cigarPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cigarLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout advancedPanelLayout = new javax.swing.GroupLayout(advancedPanel);
        advancedPanel.setLayout(advancedPanelLayout);
        advancedPanelLayout.setHorizontalGroup(
            advancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(advancedPanelLayout.createSequentialGroup()
                .addComponent(mdTagPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cigarPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        advancedPanelLayout.setVerticalGroup(
            advancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mdTagPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(cigarPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(startEndPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(alignmentPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mappingQualityPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(flagsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mateInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(advancedInfosToggleButton)
                    .addComponent(advancedPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(startEndPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(alignmentPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mappingQualityPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(flagsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mateInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(advancedInfosToggleButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(advancedPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

	private void advancedInfosToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_advancedInfosToggleButtonActionPerformed
		advancedPanel.setVisible(advancedInfosToggleButton.isSelected());
		((JDialog)this.getParent().getParent().getParent()).pack();
		Viewer.getActiveProfile().setAdvancedReadInfosDisplayed(advancedInfosToggleButton.isSelected());
	}//GEN-LAST:event_advancedInfosToggleButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel MDTagLabel;
    private javax.swing.JTextPane MDTagTextPane;
    private javax.swing.JToggleButton advancedInfosToggleButton;
    private javax.swing.JPanel advancedPanel;
    private javax.swing.JLabel alignmentLabel;
    private javax.swing.JPanel alignmentPanel;
    private javax.swing.JTextPane alignmentText;
    private javax.swing.JLabel cigarLabel;
    private javax.swing.JPanel cigarPanel;
    private javax.swing.JTextPane cigarTextPane;
    private javax.swing.JLabel flagLabel;
    private javax.swing.JTable flagTable;
    private javax.swing.JPanel flagsPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel mappingQualityLabel;
    private javax.swing.JPanel mappingQualityPanel;
    private javax.swing.JTextPane mappingQualityTextPane;
    private javax.swing.JLabel mateInfoLabel;
    private javax.swing.JPanel mateInfoPanel;
    private javax.swing.JTable mateInfoTable;
    private javax.swing.JPanel mdTagPanel;
    private javax.swing.JLabel qualityLabel;
    private javax.swing.JTable qualityTable;
    private javax.swing.JScrollPane qualityTableScrollPane;
    private javax.swing.JLabel startEndLabel;
    private javax.swing.JPanel startEndPanel;
    private javax.swing.JTextPane startEndTextPane;
    // End of variables declaration//GEN-END:variables
	public void fillQualityTable(String qualityString) {
		Map<Character, Byte> characters = new HashMap<Character, Byte>();
		char[] chars = qualityString.toCharArray();
		Object[][] qualityRowData;
		if (chars.length > 0) {
			for (int i = 0; i < chars.length; i++) {
				characters.put(chars[i], (byte) chars[i]);
			}
			qualityRowData = new Object[characters.keySet().size()][2];
			int i = 0;
			for (char key : characters.keySet()) {
				qualityRowData[i][0] = key;
				qualityRowData[i][1] = characters.get(key);
				i++;
			}
			qualityTable.setModel(new MyTableModel(qualityRowData, new String[] { Viewer.getLabelResources().getString("characters"), Viewer.getLabelResources().getString("asciiCode") }));
		} else {
			qualityRowData = new Object[][] { { null, null } };
			qualityTable.setModel(new MyTableModel(qualityRowData, new String[] { Viewer.getLabelResources().getString("characters"), Viewer.getLabelResources().getString("asciiCode") }));
		}
		qualityTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
		qualityTable.setMinimumSize(new Dimension(50, chars.length * 20));
		// qualityTableScrollPane.setPreferredSize(new Dimension(170,
		// chars.length * 20 + 20));
		qualityTableScrollPane.setBorder(emptyBorder);
	}

	public void fillMateInfoTable(AlignmentRecord read) {
		mateInfoTable.setModel(new MyTableModel(new Object[][] { { "Mate ref", read.getMateReferenceName() }, { "Mate pos", read.getMatePosition() }, { "Insert size", read.getInsertSize() } }, new String[] { "", "" }));
		mateInfoTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
		mateInfoTable.getColumnModel().getColumn(0).setPreferredWidth(70);
		// mateInfoScrollPane.setPreferredSize(new Dimension(160, 100));
//		mateInfoScrollPane.setBorder(emptyBorder);
		// if (read.getMateReferenceName().length() > 20) {
		// mateInfoTable.getColumnModel().getColumn(1).setPreferredWidth(read.getMateReferenceName().length()
		// * 5);
		// }
	}

	public void fillFlagTable(short flag) {
		flagTable.setModel(new MyTableModel(new Object[][] { { Viewer.getLabelResources().getString("paired"), flagChecker(0, flag), Viewer.getLabelResources().getString("firstReadOfPair"), flagChecker(6, flag) },
				{ Viewer.getLabelResources().getString("mappedPairMember"), flagChecker(1, flag), Viewer.getLabelResources().getString("secondReadOfPair"), flagChecker(7, flag) },
				{ Viewer.getLabelResources().getString("unmapped"), flagChecker(2, flag), Viewer.getLabelResources().getString("notPrimaryAlignment"), flagChecker(8, flag) },
				{ Viewer.getLabelResources().getString("mateUnmapped"), flagChecker(3, flag), Viewer.getLabelResources().getString("failsQualityCheck"), flagChecker(9, flag) },
				{ Viewer.getLabelResources().getString("reverseStrand"), flagChecker(4, flag), Viewer.getLabelResources().getString("pcrOrOpticalDuplicate"), flagChecker(10, flag) }, { Viewer.getLabelResources().getString("mateReverseStrand"), flagChecker(5, flag), "", "" }, }, new String[] { "", "", "", "" }));
//		flagTableScrollPane.setBorder(emptyBorder);
		flagTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
		flagTable.getColumnModel().getColumn(0).setPreferredWidth(170);
		flagTable.getColumnModel().getColumn(1).setPreferredWidth(40);
		flagTable.getColumnModel().getColumn(2).setPreferredWidth(170);
		flagTable.getColumnModel().getColumn(3).setPreferredWidth(40);
	}

	private String flagChecker(int testedBit, short flag) {
		short shifted = (short) ((short) (flag << 15 - testedBit) >> 15);
		return (shifted & 1) == 1 ? Viewer.getLabelResources().getString("flagTrue") : Viewer.getLabelResources().getString("flagFalse");
	}

	public void setReadText(String alignment) {
		alignmentText.setText(alignment);
	}

	public void setCigarText(String cigar) {
		this.cigarTextPane.setText(cigar);
	}

	public void setMDTagText(String MDTagText) {
		this.MDTagTextPane.setText(MDTagText);
	}

	/**
	 *
	 * @param startPos global start position, inclusive
	 * @param endPos global end position, exclusive
	 */
	public void setStartEnd(int startPos, int endPos){

		this.startEndTextPane.setText(startPos + " - " + endPos);
	}

	/**
	 *
	 * @param mappingQuality mapping quality as unsigned byte, 255 means mapping quality isn't available
	 */
	public void setMappingQuality(byte mappingQuality) {

		int mappingQualityAsInt = unsignedByteToInt(mappingQuality);

		if (mappingQualityAsInt == 255) {
			mappingQualityTextPane.setText("N/A");
		}
		else {
			mappingQualityTextPane.setText(Integer.toString(mappingQualityAsInt));
		}
	}

	private int unsignedByteToInt(byte mappingQuality) {
		return (int) (mappingQuality & 0xFF);
    }
}
