/*
 * This file is part of GenoViewer.
 *
 * GenoViewer is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * GenoViewer is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with GenoViewer.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AnnotationTypesDialog.java
 *
 * Created on 2010.09.07., 11:09:01
 */
package hu.astrid.viewer.gui.content.annotation;

import hu.astrid.mvc.swing.AbstractView;
import hu.astrid.viewer.Viewer;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import javax.swing.AbstractCellEditor;
import javax.swing.JButton;
import javax.swing.JColorChooser;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;

/**
 *
 * @author Szuni
 */
public class AnnotationTypesDialog extends javax.swing.JDialog {

	private static final long serialVersionUID = 1L;

	/** Creates new form AnnotationTypesDialog */
	public AnnotationTypesDialog(java.awt.Frame parent, boolean modal) {
		super(parent, modal);
		initComponents();
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Type", "Visibility", "Group", "Color"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Boolean.class, java.lang.Boolean.class, java.awt.Color.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText(Viewer.getLabelResources().getString("ok")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(177, 177, 177)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 269, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
		Set<String> groups = new HashSet<String>();
		Map<String, Boolean> visibleAnnotations = new HashMap<String, Boolean>();
		Map<String, Color> colorMap = new HashMap<String, Color>();
		for (AbstractView view : Viewer.getMainWindow().getAdditionalViews()) {
			if (view instanceof GffPanel) {
				DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

				for (int i = 0; i < jTable1.getRowCount(); ++i) {
					if ((Boolean) model.getValueAt(i, 2)) {
						groups.add((String) model.getValueAt(i, 0));
					}
					visibleAnnotations.put((String) model.getValueAt(i, 0), (Boolean) model.getValueAt(i, 1));
					colorMap.put((String) model.getValueAt(i, 0), (Color) model.getValueAt(i, 3));
				}
				Viewer.getController().setAnnotationColors(colorMap);
				((GffPanel) view).setAnnotations(Viewer.getController().getAnnotations(), visibleAnnotations, groups);
			}
		}
		Viewer.getController().setAnnotationsVisibility(visibleAnnotations);
		Viewer.getController().setAnnotationGroups(groups);
		this.setVisible(false);
		this.dispose();
	}//GEN-LAST:event_jButton1ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

	/**
	 * Custiomize dialog for actual annotation types
	 * @param annotations annotation types in current file
	 * @param annotationsVisibility annotations and its visibility
	 * @param groups annotation types represented as group
	 */
	public void customize(Set<String> annotations, Map<String, Boolean> annotationsVisibility, Set<String> groups) {
		DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

		jTable1.getColumnModel().getColumn(0).setHeaderValue(Viewer.getLabelResources().getString("annotationTypeDialogType"));
		jTable1.getColumnModel().getColumn(0).setCellRenderer(jTable1.getDefaultRenderer(String.class));
		jTable1.getColumnModel().getColumn(1).setHeaderValue(Viewer.getLabelResources().getString("annotationTypeDialogVisibility"));
		jTable1.getColumnModel().getColumn(1).setCellRenderer(jTable1.getDefaultRenderer(Boolean.class));
		jTable1.getColumnModel().getColumn(2).setHeaderValue(Viewer.getLabelResources().getString("annotationTypeDialogGroup"));
		jTable1.getColumnModel().getColumn(2).setCellRenderer(jTable1.getDefaultRenderer(Boolean.class));
		jTable1.setDefaultRenderer(Color.class, new ColorRenderer());
		jTable1.setDefaultEditor(Color.class, new ColorEditor());

		for (String type : annotations) {
			final boolean isGroup = groups != null ? groups.contains(type) : false;
			final boolean isVisible = annotationsVisibility != null && annotationsVisibility.containsKey(type) ? annotationsVisibility.get(type) : true;
			final Color color = Viewer.getController().getAnnottationColor(type) != null ? Viewer.getController().getAnnottationColor(type) : isGroup ? Color.black : Color.cyan;
			model.addRow(new Object[]{type, isVisible, isGroup, color});
		}
	}

	public class ColorRenderer extends JLabel implements TableCellRenderer {

		public ColorRenderer() {
			setOpaque(true);
		}

		public Component getTableCellRendererComponent(JTable table, Object color, boolean isSelected, boolean hasFocus, int row, int column) {
			Color newColor = (Color) color;
			setBackground(newColor);

			setToolTipText("RGB : " + newColor.getRed() + ", "
					+ newColor.getGreen() + ", "
					+ newColor.getBlue());
			return this;
		}
	}

	private class ColorEditor extends AbstractCellEditor implements TableCellEditor, ActionListener {

		Color currentColor;
		JButton button;
		JColorChooser colorChooser;
		JDialog dialog;
		protected static final String EDIT = "edit";

		public ColorEditor() {
			button = new JButton();
			button.setActionCommand(EDIT);
			button.addActionListener(this);
			button.setBorderPainted(false);

			//Set up the dialog that the button brings up.
			colorChooser = new JColorChooser();
			dialog = JColorChooser.createDialog(button,
					"Pick a Color",
					true, //modal
					colorChooser,
					this, //OK button handler
					null); //no CANCEL button handler
		}

		public void actionPerformed(ActionEvent e) {
			if (EDIT.equals(e.getActionCommand())) {
				//The user has clicked the cell, so
				//bring up the dialog.
				button.setBackground(currentColor);
				colorChooser.setColor(currentColor);
				dialog.setVisible(true);

				fireEditingStopped(); //Make the renderer reappear.

			} else { //User pressed dialog's "OK" button.
				currentColor = colorChooser.getColor();
			}
		}

		//Implement the one CellEditor method that AbstractCellEditor doesn't.
		public Object getCellEditorValue() {
			return currentColor;
		}

		//Implement the one method defined by TableCellEditor.
		public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
			currentColor = (Color) value;
			return button;
		}
	}
}
